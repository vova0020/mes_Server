import { Injectable } from '@nestjs/common';
import { PrismaService } from '../../../../../shared/prisma.service';
import { Machine, MachineStatus } from '@prisma/client';
import {
  StagesWithSubstagesResponse,
  SubstageOptionResponse,
} from '../../../dto/machines/machines.dto';

export interface CreateMachineData {
  machineName: string;
  status: MachineStatus;
  recommendedLoad: number;
  loadUnit: string;
  isTaskChangeable: boolean;
}

export interface UpdateMachineData {
  machineName?: string;
  status?: MachineStatus;
  recommendedLoad?: number;
  loadUnit?: string;
  isTaskChangeable?: boolean;
}

@Injectable()
export class MachinesService {
  constructor(private readonly prisma: PrismaService) {
    console.log('üîß MachinesService: –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞–Ω–∫–∏ —Å –∏—Ö —Å–≤—è–∑—è–º–∏
  async findAll() {
    console.log('üìã MachinesService.findAll: –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Å—Ç–∞–Ω–∫–æ–≤');
    try {
      const result = await this.prisma.machine.findMany({
        include: {
          machinesStages: {
            include: {
              stage: true,
            },
          },
          machineSubstages: {
            include: {
              substage: {
                include: {
                  stage: true,
                },
              },
            },
          },
        },
        orderBy: {
          machineName: 'asc',
        },
      });
      console.log(
        `‚úÖ MachinesService.findAll: –ù–∞–π–¥–µ–Ω–æ ${result.length} —Å—Ç–∞–Ω–∫–æ–≤`,
      );
      return result;
    } catch (error) {
      console.error(
        '‚ùå MachinesService.findAll: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–Ω–∫–æ–≤:',
        error,
      );
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–æ–∫ –ø–æ ID
  async findOne(id: number) {
    console.log(`üîç MachinesService.findOne: –ü–æ–∏—Å–∫ —Å—Ç–∞–Ω–∫–∞ —Å ID ${id}`);
    try {
      const result = await this.prisma.machine.findUnique({
        where: { machineId: id },
        include: {
          machinesStages: {
            include: {
              stage: true,
            },
          },
          machineSubstages: {
            include: {
              substage: {
                include: {
                  stage: true,
                },
              },
            },
          },
        },
      });

      if (result) {
        console.log(
          `‚úÖ MachinesService.findOne: –ù–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–æ–∫ "${result.machineName}" (ID: ${id})`,
        );
      } else {
        console.log(`‚ö†Ô∏è MachinesService.findOne: –°—Ç–∞–Ω–æ–∫ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      return result;
    } catch (error) {
      console.error(
        `‚ùå MachinesService.findOne: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–Ω–∫–∞ ID ${id}:`,
        error,
      );
      throw error;
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫
  async create(data: CreateMachineData) {
    console.log('‚ûï MachinesService.create: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω–∫–∞');
    console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', JSON.stringify(data, null, 2));

    try {
      const result = await this.prisma.machine.create({
        data: {
          machineName: data.machineName,
          status: data.status,
          recommendedLoad: data.recommendedLoad,
          loadUnit: data.loadUnit,
          isTaskChangeable: data.isTaskChangeable,
        },
        include: {
          machinesStages: {
            include: {
              stage: true,
            },
          },
          machineSubstages: {
            include: {
              substage: {
                include: {
                  stage: true,
                },
              },
            },
          },
        },
      });

      console.log(
        `‚úÖ MachinesService.create: –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å—Ç–∞–Ω–æ–∫ "${result.machineName}" (ID: ${result.machineId})`,
      );
      return result;
    } catch (error) {
      console.error(
        '‚ùå MachinesService.create: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞:',
        error,
      );
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–æ–∫
  async update(id: number, data: UpdateMachineData) {
    console.log(`üîÑ MachinesService.update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ ID ${id}`);
    console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', JSON.stringify(data, null, 2));

    try {
      const result = await this.prisma.machine.update({
        where: { machineId: id },
        data,
        include: {
          machinesStages: {
            include: {
              stage: true,
            },
          },
          machineSubstages: {
            include: {
              substage: {
                include: {
                  stage: true,
                },
              },
            },
          },
        },
      });

      console.log(
        `‚úÖ MachinesService.update: –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–æ–∫ "${result.machineName}" (ID: ${id})`,
      );
      return result;
    } catch (error) {
      if (error.code === 'P2025') {
        console.log(
          `‚ö†Ô∏è MachinesService.update: –°—Ç–∞–Ω–æ–∫ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω (P2025)`,
        );
        return null;
      }
      console.error(
        `‚ùå MachinesService.update: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞ ID ${id}:`,
        error,
      );
      throw error;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞–Ω–æ–∫
  async remove(id: number) {
    console.log(`üóëÔ∏è MachinesService.remove: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ ID ${id}`);

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
      const machine = await this.prisma.machine.findUnique({
        where: { machineId: id },
      });

      if (!machine) {
        console.log(`‚ö†Ô∏è MachinesService.remove: –°—Ç–∞–Ω–æ–∫ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return null;
      }

      console.log(
        `üîç MachinesService.remove: –ù–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–æ–∫ "${machine.machineName}" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`,
      );

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–æ–∫ (—Å–≤—è–∑–∏ —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è CASCADE)
      await this.prisma.machine.delete({
        where: { machineId: id },
      });

      console.log(
        `‚úÖ MachinesService.remove: –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å—Ç–∞–Ω–æ–∫ "${machine.machineName}" (ID: ${id})`,
      );
      return machine;
    } catch (error) {
      if (error.code === 'P2025') {
        console.log(
          `‚ö†Ô∏è MachinesService.remove: –°—Ç–∞–Ω–æ–∫ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω (P2025)`,
        );
        return null;
      }
      console.error(
        `‚ùå MachinesService.remove: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞ ID ${id}:`,
        error,
      );
      throw error;
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å —Å —ç—Ç–∞–ø–æ–º 1-–≥–æ —É—Ä–æ–≤–Ω—è
  async addStage(machineId: number, stageId: number) {
    console.log(
      `üîó MachinesService.addStage: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ —Å—Ç–∞–Ω–∫–∞ ${machineId} —Å —ç—Ç–∞–ø–æ–º ${stageId}`,
    );

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–∫–∞ ID ${machineId}`);
      const machine = await this.prisma.machine.findUnique({
        where: { machineId },
      });

      if (!machine) {
        console.log(`‚ùå –°—Ç–∞–Ω–æ–∫ —Å ID ${machineId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw new Error('–°—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      console.log(`‚úÖ –°—Ç–∞–Ω–æ–∫ "${machine.machineName}" –Ω–∞–π–¥–µ–Ω`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç—Ç–∞–ø–∞ ID ${stageId}`);
      const stage = await this.prisma.productionStageLevel1.findUnique({
        where: { stageId },
      });

      if (!stage) {
        console.log(`‚ùå –≠—Ç–∞–ø —Å ID ${stageId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw new Error('–≠—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      console.log(`‚úÖ –≠—Ç–∞–ø "${stage.stageName}" –Ω–∞–π–¥–µ–Ω`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–≤—è–∑—å
      console.log(
        `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å—Ç–∞–Ω–∫–æ–º ${machineId} –∏ —ç—Ç–∞–ø–æ–º ${stageId}`,
      );
      const existingRelation = await this.prisma.machineStage.findFirst({
        where: {
          machineId,
          stageId,
        },
      });

      if (existingRelation) {
        console.log(
          `‚ö†Ô∏è –°–≤—è–∑—å –º–µ–∂–¥—É —Å—Ç–∞–Ω–∫–æ–º ${machineId} –∏ —ç—Ç–∞–ø–æ–º ${stageId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
        );
        throw new Error('–°–≤—è–∑—å –º–µ–∂–¥—É —Å—Ç–∞–Ω–∫–æ–º –∏ —ç—Ç–∞–ø–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }

      console.log(
        `‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å—Ç–∞–Ω–∫–æ–º "${machine.machineName}" –∏ —ç—Ç–∞–ø–æ–º "${stage.stageName}"`,
      );
      const result = await this.prisma.machineStage.create({
        data: {
          machineId,
          stageId,
        },
        include: {
          machine: true,
          stage: true,
        },
      });

      console.log(
        `‚úÖ MachinesService.addStage: –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å (ID: ${result.machineStageId})`,
      );
      return result;
    } catch (error) {
      console.error(
        `‚ùå MachinesService.addStage: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å—Ç–∞–Ω–∫–∞ ${machineId} —Å —ç—Ç–∞–ø–æ–º ${stageId}:`,
        error,
      );
      throw error;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å —Å —ç—Ç–∞–ø–æ–º 1-–≥–æ —É—Ä–æ–≤–Ω—è
  async removeStage(machineId: number, stageId: number) {
    console.log(
      `üîó‚ùå MachinesService.removeStage: –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ —Å—Ç–∞–Ω–∫–∞ ${machineId} —Å —ç—Ç–∞–ø–æ–º ${stageId}`,
    );

    try {
      const relation = await this.prisma.machineStage.findFirst({
        where: {
          machineId,
          stageId,
        },
      });

      if (!relation) {
        console.log(
          `‚ö†Ô∏è –°–≤—è–∑—å –º–µ–∂–¥—É —Å—Ç–∞–Ω–∫–æ–º ${machineId} –∏ —ç—Ç–∞–ø–æ–º ${stageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`,
        );
        throw new Error('–°–≤—è–∑—å –º–µ–∂–¥—É —Å—Ç–∞–Ω–∫–æ–º –∏ —ç—Ç–∞–ø–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      console.log(
        `üîç –ù–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑—å ID ${relation.machineStageId}, –Ω–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ`,
      );

      // –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å —ç—Ç–∞–ø–æ–º 1-–≥–æ —É—Ä–æ–≤–Ω—è, —Ç–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏ —Å –ø–æ–¥—ç—Ç–∞–ø–∞–º–∏ —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞
      console.log(
        `üîó‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–≤—è–∑–µ–π —Å –ø–æ–¥—ç—Ç–∞–ø–∞–º–∏ —ç—Ç–∞–ø–∞ ${stageId} –¥–ª—è —Å—Ç–∞–Ω–∫–∞ ${machineId}`,
      );
      const deletedSubstages = await this.prisma.machineSubstage.deleteMany({
        where: {
          machineId,
          substage: {
            stageId,
          },
        },
      });

      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedSubstages.count} —Å–≤—è–∑–µ–π —Å –ø–æ–¥—ç—Ç–∞–ø–∞–º–∏`);

      await this.prisma.machineStage.delete({
        where: {
          machineStageId: relation.machineStageId,
        },
      });

      console.log(
        `‚úÖ MachinesService.removeStage: –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å–≤—è–∑—å —Å—Ç–∞–Ω–∫–∞ ${machineId} —Å —ç—Ç–∞–ø–æ–º ${stageId}`,
      );
    } catch (error) {
      console.error(
        `‚ùå MachinesService.removeStage: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å—Ç–∞–Ω–∫–∞ ${machineId} —Å —ç—Ç–∞–ø–æ–º ${stageId}:`,
        error,
      );
      throw error;
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º 2-–≥–æ —É—Ä–æ–≤–Ω—è (—Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)
  async addSubstage(machineId: number, substageId: number) {
    console.log(
      `üîó MachinesService.addSubstage: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ —Å—Ç–∞–Ω–∫–∞ ${machineId} —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º ${substageId}`,
    );

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–∫–∞ ID ${machineId}`);
      const machine = await this.prisma.machine.findUnique({
        where: { machineId },
      });

      if (!machine) {
        console.log(`‚ùå –°—Ç–∞–Ω–æ–∫ —Å ID ${machineId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw new Error('–°—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      console.log(`‚úÖ –°—Ç–∞–Ω–æ–∫ "${machine.machineName}" –Ω–∞–π–¥–µ–Ω`);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—ç—Ç–∞–ø —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —ç—Ç–∞–ø–µ
      console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥—ç—Ç–∞–ø–µ ID ${substageId}`);
      const substage = await this.prisma.productionStageLevel2.findUnique({
        where: { substageId },
        include: {
          stage: true,
        },
      });

      if (!substage) {
        console.log(`‚ùå –ü–æ–¥—ç—Ç–∞–ø —Å ID ${substageId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw new Error('–ü–æ–¥—ç—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      console.log(
        `‚úÖ –ü–æ–¥—ç—Ç–∞–ø "${substage.substageName}" –Ω–∞ÔøΩÔøΩ–¥–µ–Ω, —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç—Ç–∞–ø: "${substage.stage.stageName}"`,
      );

      // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–Ω–æ–∫ —Å–≤—è–∑–∞–Ω —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —ç—Ç–∞–ø–æ–º 1-–≥–æ —É—Ä–æ–≤–Ω—è
      console.log(
        `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å—Ç–∞–Ω–∫–∞ ${machineId} —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —ç—Ç–∞–ø–æ–º ${substage.stageId}`,
      );
      const machineStageRelation = await this.prisma.machineStage.findFirst({
        where: {
          machineId,
          stageId: substage.stageId,
        },
      });

      if (!machineStageRelation) {
        console.log(
          `‚ùå –°—Ç–∞–Ω–æ–∫ ${machineId} –Ω–µ —Å–≤—è–∑–∞–Ω —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —ç—Ç–∞–ø–æ–º ${substage.stageId}`,
        );
        throw new Error(
          `–ù–µ–ª—å–∑—è –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ–¥—ç—Ç–∞–ø "${substage.substageName}" –∫ —Å—Ç–∞–Ω–∫—É. ` +
            `–°—Ç–∞–Ω–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å–≤—è–∑–∞–Ω —Å —ç—Ç–∞–ø–æ–º "${substage.stage.stageName}"`,
        );
      }
      console.log(
        `‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑—å —Å—Ç–∞–Ω–∫–∞ —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —ç—Ç–∞–ø–æ–º (ID: ${machineStageRelation.machineStageId})`,
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–≤—è–∑—å
      console.log(
        `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å—Ç–∞–Ω–∫–æ–º ${machineId} –∏ –ø–æ–¥—ç—Ç–∞–ø–æ–º ${substageId}`,
      );
      const existingRelation = await this.prisma.machineSubstage.findFirst({
        where: {
          machineId,
          substageId,
        },
      });

      if (existingRelation) {
        console.log(
          `‚ö†Ô∏è –°–≤—è–∑—å –º–µ–∂–¥—É —Å—Ç–∞–Ω–∫–æ–º ${machineId} –∏ –ø–æ–¥—ç—Ç–∞–ø–æ–º ${substageId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
        );
        throw new Error('–°–≤—è–∑—å –º–µ–∂–¥—É —Å—Ç–∞–Ω–∫–æ–º –∏ –ø–æ–¥—ç—Ç–∞–ø–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }

      console.log(
        `‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å—Ç–∞–Ω–∫–æ–º "${machine.machineName}" –∏ –ø–æ–¥—ç—Ç–∞–ø–æ–º "${substage.substageName}"`,
      );
      const result = await this.prisma.machineSubstage.create({
        data: {
          machineId,
          substageId,
        },
        include: {
          machine: true,
          substage: {
            include: {
              stage: true,
            },
          },
        },
      });

      console.log(
        `‚úÖ MachinesService.addSubstage: –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å (ID: ${result.machineSubstageId})`,
      );
      return result;
    } catch (error) {
      console.error(
        `‚ùå MachinesService.addSubstage: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å—Ç–∞–Ω–∫–∞ ${machineId} —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º ${substageId}:`,
        error,
      );
      throw error;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º 2-–≥–æ —É—Ä–æ–≤–Ω—è
  async removeSubstage(machineId: number, substageId: number) {
    console.log(
      `üîó‚ùå MachinesService.removeSubstage: –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ —Å—Ç–∞–Ω–∫–∞ ${machineId} —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º ${substageId}`,
    );

    try {
      const relation = await this.prisma.machineSubstage.findFirst({
        where: {
          machineId,
          substageId,
        },
      });

      if (!relation) {
        console.log(
          `‚ö†Ô∏è –°–≤—è–∑—å –º–µ–∂–¥—É —Å—Ç–∞–Ω–∫–æ–º ${machineId} –∏ –ø–æ–¥—ç—Ç–∞–ø–æ–º ${substageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`,
        );
        throw new Error('–°–≤—è–∑—å –º–µ–∂–¥—É —Å—Ç–∞–Ω–∫–æ–º –∏ –ø–æ–¥—ç—Ç–∞–ø–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      console.log(
        `üîç –ù–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑—å ID ${relation.machineSubstageId}, –Ω–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ`,
      );

      await this.prisma.machineSubstage.delete({
        where: {
          machineSubstageId: relation.machineSubstageId,
        },
      });

      console.log(
        `‚úÖ MachinesService.removeSubstage: –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å–≤—è–∑—å —Å—Ç–∞–Ω–∫–∞ ${machineId} —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º ${substageId}`,
      );
    } catch (error) {
      console.error(
        `‚ùå MachinesService.removeSubstage: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥ÔøΩÔøΩ–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å—Ç–∞–Ω–∫–∞ ${machineId} —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º ${substageId}:`,
        error,
      );
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã –∏ –ø–æ–¥—ç—Ç–∞–ø—ã –¥–ª—è —Å—Ç–∞–Ω–∫–∞
  async getMachineStages(machineId: number) {
    console.log(
      `üìã MachinesService.getMachineStages: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –¥–ª—è —Å—Ç–∞–Ω–∫–∞ ${machineId}`,
    );

    try {
      const machine = await this.prisma.machine.findUnique({
        where: { machineId },
        include: {
          machinesStages: {
            include: {
              stage: {
                include: {
                  productionStagesLevel2: true,
                },
              },
            },
          },
          machineSubstages: {
            include: {
              substage: {
                include: {
                  stage: true,
                },
              },
            },
          },
        },
      });

      if (!machine) {
        console.log(`‚ùå –°—Ç–∞–Ω–æ–∫ —Å ID ${machineId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw new Error('–°—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–æ–∫ "${machine.machineName}"`);
      console.log(`üìä –°–≤—è–∑–∞–Ω–æ —ç—Ç–∞–ø–æ–≤: ${machine.machinesStages.length}`);
      console.log(`üìä –°–≤—è–∑–∞–Ω–æ –ø–æ–¥—ç—Ç–∞–ø–æ–≤: ${machine.machineSubstages.length}`);

      const result = {
        machine: {
          machineId: machine.machineId,
          machineName: machine.machineName,
        },
        stages: machine.machinesStages.map((ms) => ({
          stageId: ms.stage.stageId,
          stageName: ms.stage.stageName,
          availableSubstages: ms.stage.productionStagesLevel2,
          connectedSubstages: machine.machineSubstages
            .filter((mss) => mss.substage.stageId === ms.stage.stageId)
            .map((mss) => mss.substage),
        })),
      };

      console.log(
        `‚úÖ MachinesService.getMachineStages: –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è —Å—Ç–∞–Ω–∫–∞ ${machineId}`,
      );
      return result;
    } catch (error) {
      console.error(
        `‚ùå MachinesService.getMachineStages: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç—Ç–∞–ø–æ–≤ —Å—Ç–∞–Ω–∫–∞ ${machineId}:`,
        error,
      );
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å—Ç–∞–Ω–∫—É
  async getAvailableStages() {
    console.log(
      'üìã MachinesService.getAvailableStages: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤',
    );

    try {
      const result = await this.prisma.productionStageLevel1.findMany({
        include: {
          productionStagesLevel2: true,
        },
        orderBy: {
          stageName: 'asc',
        },
      });

      console.log(
        `‚úÖ MachinesService.getAvailableStages: –ù–∞–π–¥–µ–Ω–æ ${result.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤`,
      );
      return result;
    } catch (error) {
      console.error(
        '‚ùå MachinesService.getAvailableStages: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤:',
        error,
      );
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥—ç—Ç–∞–ø—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
  async getAvailableSubstages(stageId: number) {
    console.log(
      `üìã MachinesService.getAvailableSubstages: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—ç—Ç–∞–ø–æ–≤ –¥–ª—è —ç—Ç–∞–ø–∞ ${stageId}`,
    );

    try {
      const result = await this.prisma.productionStageLevel2.findMany({
        where: { stageId },
        include: {
          stage: true,
        },
        orderBy: {
          substageName: 'asc',
        },
      });

      console.log(
        `‚úÖ MachinesService.getAvailableSubstages: –ù–∞–π–¥–µ–Ω–æ ${result.length} –ø–æ–¥—ç—Ç–∞–ø–æ–≤ –¥–ª—è —ç—Ç–∞–ø–∞ ${stageId}`,
      );
      return result;
    } catch (error) {
      console.error(
        `‚ùå MachinesService.getAvailableSubstages: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—ç—Ç–∞–ø–æ–≤ –¥–ª—è —ç—Ç–∞–ø–∞ ${stageId}:`,
        error,
      );
      throw error;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã —Å –ø–æ–¥—ç—Ç–∞–ø–∞–º–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
  async getAllStagesWithSubstages(): Promise<StagesWithSubstagesResponse[]> {
    console.log(
      'üìã MachinesService.getAllStagesWithSubstages: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ —Å –ø–æ–¥—ç—Ç–∞–ø–∞–º–∏',
    );

    try {
      const stages = await this.prisma.productionStageLevel1.findMany({
        include: {
          productionStagesLevel2: {
            orderBy: {
              substageName: 'asc',
            },
          },
        },
        orderBy: {
          stageName: 'asc',
        },
      });

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${stages.length} —ç—Ç–∞–ø–æ–≤`);

      const result = stages.map((stage) => {
        const substagesCount = stage.productionStagesLevel2.length;
        console.log(
          `üìù –≠—Ç–∞–ø "${stage.stageName}" —Å–æ–¥–µ—Ä–∂–∏—Ç ${substagesCount} –ø–æ–¥—ç—Ç–∞–ø–æ–≤`,
        );

        return {
          stageId: stage.stageId,
          stageName: stage.stageName,
          description: stage.description,
          createdAt: stage.createdAt,
          updatedAt: stage.updatedAt,
          substages: stage.productionStagesLevel2.map((substage) => ({
            substageId: substage.substageId,
            substageName: substage.substageName,
            description: substage.description,
            allowance: Number(substage.allowance),
          })),
        };
      });

      console.log(
        `‚úÖ MachinesService.getAllStagesWithSubstages: –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã`,
      );
      return result;
    } catch (error) {
      console.error(
        '‚ùå MachinesService.getAllStagesWithSubstages: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç—Ç–∞–ø–æ–≤ —Å –ø–æ–¥—ç—Ç–∞–ø–∞–º–∏:',
        error,
      );
      throw error;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥—ç—Ç–∞–ø—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–∞–ø–∞–º (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
  async getAllSubstagesGrouped(): Promise<SubstageOptionResponse[]> {
    console.log(
      'üìã MachinesService.getAllSubstagesGrouped: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥—ç—Ç–∞–ø–æ–≤ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–∞–ø–∞–º',
    );

    try {
      const substages = await this.prisma.productionStageLevel2.findMany({
        include: {
          stage: true,
        },
        orderBy: [
          {
            stage: {
              stageName: 'asc',
            },
          },
          {
            substageName: 'asc',
          },
        ],
      });

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${substages.length} –ø–æ–¥—ç—Ç–∞–ø–æ–≤`);

      const result = substages.map((substage) => ({
        substageId: substage.substageId,
        substageName: substage.substageName,
        description: substage.description,
        allowance: Number(substage.allowance),
        parentStage: {
          stageId: substage.stage.stageId,
          stageName: substage.stage.stageName,
        },
      }));

      console.log(
        `‚úÖ MachinesService.getAllSubstagesGrouped: –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã`,
      );
      return result;
    } catch (error) {
      console.error(
        '‚ùå MachinesService.getAllSubstagesGrouped: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—ç—Ç–∞–ø–æ–≤:',
        error,
      );
      throw error;
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤ –∏ –ø–æ–¥—ç—Ç–∞–ø–æ–≤ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
  async getStagesStatistics() {
    console.log('üìä MachinesService.getStagesStatistics: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');

    try {
      console.log('üî¢ –ü–æ–¥—Å—á–µ—Ç —ç—Ç–∞–ø–æ–≤...');
      const stagesCount = await this.prisma.productionStageLevel1.count();

      console.log('üî¢ –ü–æ–¥—Å—á–µ—Ç –ø–æ–¥—ç—Ç–∞–ø–æ–≤...');
      const substagesCount = await this.prisma.productionStageLevel2.count();

      console.log('üî¢ –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞–Ω–∫–æ–≤...');
      const machinesCount = await this.prisma.machine.count();

      console.log('üî¢ –ü–æ–¥—Å—á–µ—Ç —Å–≤—è–∑–µ–π —Å—Ç–∞–Ω–∫–æ–≤ —Å —ç—Ç–∞–ø–∞–º–∏...');
      const machineStagesCount = await this.prisma.machineStage.count();

      console.log('üî¢ –ü–æ–¥—Å—á–µ—Ç —Å–≤—è–∑–µ–π —Å—Ç–∞–Ω–∫–æ–≤ —Å –ø–æ–¥—ç—Ç–∞–ø–∞–º–∏...');
      const machineSubstagesCount = await this.prisma.machineSubstage.count();

      const result = {
        stages: stagesCount,
        substages: substagesCount,
        machines: machinesCount,
        machineStageConnections: machineStagesCount,
        machineSubstageConnections: machineSubstagesCount,
      };

      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', JSON.stringify(result, null, 2));
      console.log(
        `‚úÖ MachinesService.getStagesStatistics: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞`,
      );

      return result;
    } catch (error) {
      console.error(
        '‚ùå MachinesService.getStagesStatistics: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:',
        error,
      );
      throw error;
    }
  }
}
