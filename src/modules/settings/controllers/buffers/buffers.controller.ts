import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Param,
  ParseIntPipe,
  Logger,
  HttpCode,
  HttpStatus,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiParam } from '@nestjs/swagger';
import { BuffersService } from '../../services/buffers/buffers.service';
import { BufferCellsService } from '../../services/buffers/buffer-cells.service';
import { BufferStagesService } from '../../services/buffers/buffer-stages.service';
import {
  CreateBufferDto,
  UpdateBufferDto,
  CopyBufferDto,
  CreateBufferCellDto,
  UpdateBufferCellDto,
  CreateBufferStageDto,
  UpdateBufferStagesDto,
  BufferResponse,
  BufferDetailResponse,
  BufferCellResponse,
  BufferStageResponse,
  StagesWithBuffersResponse,
} from '../../dto/buffers/buffers.dto';

@ApiTags('–ë—É—Ñ–µ—Ä—ã')
@Controller('buffers')
export class BuffersController {
  private readonly logger = new Logger(BuffersController.name);

  constructor(
    private readonly buffersService: BuffersService,
    private readonly bufferCellsService: BufferCellsService,
    private readonly bufferStagesService: BufferStagesService,
  ) {}

  // ================================
  // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –±—É—Ñ–µ—Ä–æ–≤
  // ================================

  @Get()
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—É—Ñ–µ—Ä–æ–≤' })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ –±—É—Ñ–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω' })
  async getAllBuffers(): Promise<BufferResponse[]> {
    const startTime = Date.now();
    this.logger.log(
      'üîç BuffersController.getAllBuffers: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±—É—Ñ–µ—Ä–æ–≤',
    );

    try {
      const result = await this.buffersService.getAllBuffers();
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.getAllBuffers: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${result.length} –±—É—Ñ–µ—Ä–æ–≤ –∑–∞ ${executionTime}ms`,
      );
      console.log(
        'üìä –°–ø–∏—Å–æ–∫ –±—É—Ñ–µ—Ä–æ–≤:',
        result.map((b) => ({
          id: b.bufferId,
          name: b.bufferName,
          cellsCount: b.cellsCount,
        })),
      );

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.getAllBuffers: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–æ–≤ –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  @Get('statistics')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—É—Ñ–µ—Ä–∞–º' })
  @ApiResponse({
    status: 200,
    description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É—Ñ–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞',
  })
  async getBuffersStatistics() {
    const startTime = Date.now();
    this.logger.log(
      'üìä BuffersController.getBuffersStatistics: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—É—Ñ–µ—Ä–æ–≤',
    );

    try {
      const result = await this.buffersService.getBuffersStatistics();
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.getBuffersStatistics: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∑–∞ ${executionTime}ms`,
      );
      console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É—Ñ–µ—Ä–æ–≤:', JSON.stringify(result, null, 2));

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.getBuffersStatistics: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  @Get(':id')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –±—É—Ñ–µ—Ä –ø–æ ID' })
  @ApiParam({ name: 'id', description: 'ID –±—É—Ñ–µ—Ä–∞' })
  @ApiResponse({ status: 200, description: '–ë—É—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω' })
  @ApiResponse({ status: 404, description: '–ë—É—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' })
  async getBufferById(
    @Param('id', ParseIntPipe) bufferId: number,
  ): Promise<BufferDetailResponse> {
    const startTime = Date.now();
    this.logger.log(
      `üîç BuffersController.getBufferById: –ó–∞–ø—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ —Å ID: ${bufferId}`,
    );

    try {
      const result = await this.buffersService.getBufferById(bufferId);
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.getBufferById: –ë—É—Ñ–µ—Ä "${result.bufferName}" –Ω–∞–π–¥–µ–Ω –∑–∞ ${executionTime}ms`,
      );
      console.log(`üìã –î–µ—Ç–∞–ª–∏ –±—É—Ñ–µ—Ä–∞:`, {
        id: result.bufferId,
        name: result.bufferName,
        location: result.location,
        cellsCount: result.cellsCount,
        stagesCount: result.stagesCount,
      });

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.getBufferById: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  @Post()
  @ApiOperation({ summary: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä' })
  @ApiResponse({ status: 201, description: '–ë—É—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω' })
  @ApiResponse({ status: 400, description: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' })
  async createBuffer(
    @Body() createBufferDto: CreateBufferDto,
  ): Promise<BufferDetailResponse> {
    const startTime = Date.now();
    this.logger.log(
      `üÜï BuffersController.createBuffer: –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ "${createBufferDto.bufferName}"`,
    );
    console.log(
      'üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—É—Ñ–µ—Ä–∞:',
      JSON.stringify(createBufferDto, null, 2),
    );

    try {
      const result = await this.buffersService.createBuffer(createBufferDto);
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.createBuffer: –ë—É—Ñ–µ—Ä "${result.bufferName}" —Å–æ–∑–¥–∞–Ω —Å ID: ${result.bufferId} –∑–∞ ${executionTime}ms`,
      );
      console.log(`üéâ –°–æ–∑–¥–∞–Ω –±—É—Ñ–µ—Ä:`, {
        id: result.bufferId,
        name: result.bufferName,
        location: result.location,
        cellsCount: result.cellsCount,
        stagesCount: result.stagesCount,
      });

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.createBuffer: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞ "${createBufferDto.bufferName}" –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  @Put(':id')
  @ApiOperation({ summary: '–û–±–Ω–æ–≤–∏—Ç—å –±—É—Ñ–µ—Ä' })
  @ApiParam({ name: 'id', description: 'ID –±—É—Ñ–µ—Ä–∞' })
  @ApiResponse({ status: 200, description: '–ë—É—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω' })
  @ApiResponse({ status: 404, description: '–ë—É—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' })
  async updateBuffer(
    @Param('id', ParseIntPipe) bufferId: number,
    @Body() updateBufferDto: UpdateBufferDto,
  ): Promise<BufferDetailResponse> {
    const startTime = Date.now();
    this.logger.log(
      `‚úèÔ∏è BuffersController.updateBuffer: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ ID: ${bufferId}`,
    );
    console.log(
      'üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:',
      JSON.stringify(updateBufferDto, null, 2),
    );

    try {
      const result = await this.buffersService.updateBuffer(
        bufferId,
        updateBufferDto,
      );
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.updateBuffer: –ë—É—Ñ–µ—Ä ID: ${bufferId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∑–∞ ${executionTime}ms`,
      );
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –±—É—Ñ–µ—Ä:`, {
        id: result.bufferId,
        name: result.bufferName,
        location: result.location,
      });

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.updateBuffer: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  @Delete(':id')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å –±—É—Ñ–µ—Ä' })
  @ApiParam({ name: 'id', description: 'ID –±—É—Ñ–µ—Ä–∞' })
  @ApiResponse({ status: 200, description: '–ë—É—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' })
  @ApiResponse({ status: 404, description: '–ë—É—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' })
  @HttpCode(HttpStatus.OK)
  async deleteBuffer(@Param('id', ParseIntPipe) bufferId: number) {
    const startTime = Date.now();
    this.logger.log(
      `üóëÔ∏è BuffersController.deleteBuffer: –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ ID: ${bufferId}`,
    );

    try {
      const result = await this.buffersService.deleteBuffer(bufferId);
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.deleteBuffer: –ë—É—Ñ–µ—Ä ID: ${bufferId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∑–∞ ${executionTime}ms`,
      );
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –±—É—Ñ–µ—Ä ID: ${bufferId}`);

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.deleteBuffer: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  @Post(':id/copy')
  @ApiOperation({ summary: '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –±—É—Ñ–µ—Ä' })
  @ApiParam({ name: 'id', description: 'ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞' })
  @ApiResponse({ status: 201, description: '–ë—É—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω' })
  @ApiResponse({ status: 404, description: '–ò—Å—Ö–æ–¥–Ω—ã–π –±—É—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' })
  async copyBuffer(
    @Param('id', ParseIntPipe) bufferId: number,
    @Body() copyBufferDto: CopyBufferDto,
  ): Promise<BufferDetailResponse> {
    const startTime = Date.now();
    this.logger.log(
      `üìã BuffersController.copyBuffer: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} –∫–∞–∫ "${copyBufferDto.newBufferName}"`,
    );
    console.log(
      'üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:',
      JSON.stringify(copyBufferDto, null, 2),
    );

    try {
      const result = await this.buffersService.copyBuffer(
        bufferId,
        copyBufferDto,
      );
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.copyBuffer: –ë—É—Ñ–µ—Ä —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–≤—ã–º ID: ${result.bufferId} –∑–∞ ${executionTime}ms`,
      );
      console.log(`üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –±—É—Ñ–µ—Ä:`, {
        originalId: bufferId,
        newId: result.bufferId,
        newName: result.bufferName,
        cellsCount: result.cellsCount,
        stagesCount: result.stagesCount,
      });

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.copyBuffer: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  // ================================
  // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —è—á–µ–π–∫–∞–º–∏ –±—É—Ñ–µ—Ä–∞
  // ================================

  @Get(':id/cells')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —è—á–µ–π–∫–∏ –±—É—Ñ–µ—Ä–∞' })
  @ApiParam({ name: 'id', description: 'ID –±—É—Ñ–µ—Ä–∞' })
  @ApiResponse({ status: 200, description: '–Ø—á–µ–π–∫–∏ –±—É—Ñ–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã' })
  async getBufferCells(
    @Param('id', ParseIntPipe) bufferId: number,
  ): Promise<BufferCellResponse[]> {
    const startTime = Date.now();
    this.logger.log(
      `üîç BuffersController.getBufferCells: –ü–æ–ª—É—á–µ–Ω–∏–µ —è—á–µ–µ–∫ –±—É—Ñ–µ—Ä–∞ ID: ${bufferId}`,
    );

    try {
      const result = await this.bufferCellsService.getBufferCells(bufferId);
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.getBufferCells: –ü–æ–ª—É—á–µ–Ω–æ ${result.length} —è—á–µ–µ–∫ –¥–ª—è –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} –∑–∞ ${executionTime}ms`,
      );
      console.log(
        `üìä –Ø—á–µ–π–∫–∏ –±—É—Ñ–µ—Ä–∞ ${bufferId}:`,
        result.map((c) => ({
          id: c.cellId,
          code: c.cellCode,
          status: c.status,
          load: `${c.currentLoad}/${c.capacity}`,
        })),
      );

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.getBufferCells: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è—á–µ–µ–∫ –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  @Get(':id/cells/statistics')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —è—á–µ–µ–∫ –±—É—Ñ–µ—Ä–∞' })
  @ApiParam({ name: 'id', description: 'ID –±—É—Ñ–µ—Ä–∞' })
  @ApiResponse({ status: 200, description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è—á–µ–µ–∫ –ø–æ–ª—É—á–µ–Ω–∞' })
  async getBufferCellsStatistics(@Param('id', ParseIntPipe) bufferId: number) {
    const startTime = Date.now();
    this.logger.log(
      `üìä BuffersController.getBufferCellsStatistics: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è—á–µ–µ–∫ –±—É—Ñ–µ—Ä–∞ ID: ${bufferId}`,
    );

    try {
      const result =
        await this.bufferCellsService.getBufferCellsStatistics(bufferId);
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.getBufferCellsStatistics: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∑–∞ ${executionTime}ms`,
      );
      console.log(
        `üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è—á–µ–µ–∫ –±—É—Ñ–µ—Ä–∞ ${bufferId}:`,
        JSON.stringify(result, null, 2),
      );

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.getBufferCellsStatistics: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —è—á–µ–µ–∫ –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  @Post(':id/cells')
  @ApiOperation({ summary: '–°–æ–∑–¥–∞—Ç—å —è—á–µ–π–∫—É –±—É—Ñ–µ—Ä–∞' })
  @ApiParam({ name: 'id', description: 'ID –±—É—Ñ–µ—Ä–∞' })
  @ApiResponse({ status: 201, description: '–Ø—á–µ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞' })
  async createBufferCell(
    @Param('id', ParseIntPipe) bufferId: number,
    @Body() createBufferCellDto: CreateBufferCellDto,
  ): Promise<BufferCellResponse> {
    const startTime = Date.now();
    this.logger.log(
      `üÜï BuffersController.createBufferCell: –°–æ–∑–¥–∞–Ω–∏–µ —è—á–µ–π–∫–∏ "${createBufferCellDto.cellCode}" –¥–ª—è –±—É—Ñ–µ—Ä–∞ ID: ${bufferId}`,
    );
    console.log(
      'üìù –î–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏:',
      JSON.stringify(createBufferCellDto, null, 2),
    );

    try {
      const result = await this.bufferCellsService.createBufferCell(
        bufferId,
        createBufferCellDto,
      );
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.createBufferCell: –Ø—á–µ–π–∫–∞ "${result.cellCode}" —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${result.cellId} –∑–∞ ${executionTime}ms`,
      );
      console.log(`üéâ –°–æ–∑–¥–∞–Ω–∞ —è—á–µ–π–∫–∞:`, {
        id: result.cellId,
        code: result.cellCode,
        status: result.status,
        capacity: result.capacity,
      });

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.createBufferCell: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —è—á–µ–π–∫–∏ –¥–ª—è –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  @Put('cells/:cellId')
  @ApiOperation({ summary: '–û–±–Ω–æ–≤–∏—Ç—å —è—á–µ–π–∫—É –±—É—Ñ–µ—Ä–∞' })
  @ApiParam({ name: 'cellId', description: 'ID —è—á–µ–π–∫–∏' })
  @ApiResponse({ status: 200, description: '–Ø—á–µ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' })
  async updateBufferCell(
    @Param('cellId', ParseIntPipe) cellId: number,
    @Body() updateBufferCellDto: UpdateBufferCellDto,
  ): Promise<BufferCellResponse> {
    const startTime = Date.now();
    this.logger.log(
      `‚úèÔ∏è BuffersController.updateBufferCell: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ ID: ${cellId}`,
    );
    console.log(
      'üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:',
      JSON.stringify(updateBufferCellDto, null, 2),
    );

    try {
      const result = await this.bufferCellsService.updateBufferCell(
        cellId,
        updateBufferCellDto,
      );
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.updateBufferCell: –Ø—á–µ–π–∫–∞ ID: ${cellId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞ ${executionTime}ms`,
      );
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —è—á–µ–π–∫–∞:`, {
        id: result.cellId,
        code: result.cellCode,
        status: result.status,
        load: `${result.currentLoad}/${result.capacity}`,
      });

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.updateBufferCell: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è—á–µ–π–∫–∏ ID: ${cellId} –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  @Delete('cells/:cellId')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å —è—á–µ–π–∫—É –±—É—Ñ–µ—Ä–∞' })
  @ApiParam({ name: 'cellId', description: 'ID —è—á–µ–π–∫–∏' })
  @ApiResponse({ status: 200, description: '–Ø—á–µ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' })
  @HttpCode(HttpStatus.OK)
  async deleteBufferCell(@Param('cellId', ParseIntPipe) cellId: number) {
    const startTime = Date.now();
    this.logger.log(
      `üóëÔ∏è BuffersController.deleteBufferCell: –£–¥–∞–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ ID: ${cellId}`,
    );

    try {
      const result = await this.bufferCellsService.deleteBufferCell(cellId);
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.deleteBufferCell: –Ø—á–µ–π–∫–∞ ID: ${cellId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∑–∞ ${executionTime}ms`,
      );
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —è—á–µ–π–∫–∞ ID: ${cellId}`);

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.deleteBufferCell: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —è—á–µ–π–∫–∏ ID: ${cellId} –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  // ================================
  // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å–≤—è–∑—è–º–∏ –±—É—Ñ–µ—Ä–∞ –∏ —ç—Ç–∞–ø–æ–≤
  // ================================

  @Get(':id/stages')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∏ –±—É—Ñ–µ—Ä–∞ —Å —ç—Ç–∞–ø–∞–º–∏' })
  @ApiParam({ name: 'id', description: 'ID –±—É—Ñ–µ—Ä–∞' })
  @ApiResponse({ status: 200, description: '–°–≤—è–∑–∏ —Å —ç—Ç–∞–ø–∞–º–∏ –ø–æ–ª—É—á–µ–Ω—ã' })
  async getBufferStages(
    @Param('id', ParseIntPipe) bufferId: number,
  ): Promise<BufferStageResponse[]> {
    const startTime = Date.now();
    this.logger.log(
      `üîç BuffersController.getBufferStages: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π —Å —ç—Ç–∞–ø–∞–º–∏ –¥–ª—è –±—É—Ñ–µ—Ä–∞ ID: ${bufferId}`,
    );

    try {
      const result = await this.bufferStagesService.getBufferStages(bufferId);
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.getBufferStages: –ü–æ–ª—É—á–µ–Ω–æ ${result.length} —Å–≤—è–∑–µ–π —Å —ç—Ç–∞–ø–∞–º–∏ –¥–ª—è –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} –∑–∞ ${executionTime}ms`,
      );
      console.log(
        `üìä –°–≤—è–∑–∏ –±—É—Ñ–µ—Ä–∞ ${bufferId} —Å —ç—Ç–∞–ø–∞–º–∏:`,
        result.map((s) => ({
          stageId: s.stageId,
          stageName: s.stage.stageName,
        })),
      );

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.getBufferStages: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤—è–∑–µ–π —Å —ç—Ç–∞–ø–∞–º–∏ –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  @Post(':id/stages')
  @ApiOperation({ summary: '–î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å –±—É—Ñ–µ—Ä–∞ —Å —ç—Ç–∞–ø–æ–º' })
  @ApiParam({ name: 'id', description: 'ID –±—É—Ñ–µ—Ä–∞' })
  @ApiResponse({ status: 201, description: '–°–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞' })
  async createBufferStage(
    @Param('id', ParseIntPipe) bufferId: number,
    @Body() createBufferStageDto: CreateBufferStageDto,
  ): Promise<BufferStageResponse> {
    const startTime = Date.now();
    this.logger.log(
      `üÜï BuffersController.createBufferStage: –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} —Å —ç—Ç–∞–ø–æ–º ID: ${createBufferStageDto.stageId}`,
    );

    try {
      const result = await this.bufferStagesService.createBufferStage(
        bufferId,
        createBufferStageDto,
      );
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.createBufferStage: –°–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${result.bufferStageId} –∑–∞ ${executionTime}ms`,
      );
      console.log(`üéâ –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å:`, {
        bufferStageId: result.bufferStageId,
        bufferId: result.bufferId,
        stageId: result.stageId,
        stageName: result.stage.stageName,
      });

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.createBufferStage: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–∏ –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} —Å —ç—Ç–∞–ø–æ–º ID: ${createBufferStageDto.stageId} –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  @Put(':id/stages')
  @ApiOperation({ summary: '–û–±–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑–∏ –±—É—Ñ–µ—Ä–∞ —Å —ç—Ç–∞–ø–∞–º–∏' })
  @ApiParam({ name: 'id', description: 'ID –±—É—Ñ–µ—Ä–∞' })
  @ApiResponse({ status: 200, description: '–°–≤—è–∑–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' })
  async updateBufferStages(
    @Param('id', ParseIntPipe) bufferId: number,
    @Body() updateBufferStagesDto: UpdateBufferStagesDto,
  ): Promise<BufferStageResponse[]> {
    const startTime = Date.now();
    this.logger.log(
      `‚úèÔ∏è BuffersController.updateBufferStages: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} —Å —ç—Ç–∞–ø–∞–º–∏: [${updateBufferStagesDto.stageIds.join(', ')}]`,
    );

    try {
      const result = await this.bufferStagesService.updateBufferStages(
        bufferId,
        updateBufferStagesDto,
      );
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.updateBufferStages: –°–≤—è–∑–∏ –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã (${result.length} —Å–≤—è–∑–µ–π) –∑–∞ ${executionTime}ms`,
      );
      console.log(
        `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–≤—è–∑–∏ –±—É—Ñ–µ—Ä–∞ ${bufferId}:`,
        result.map((s) => ({
          stageId: s.stageId,
          stageName: s.stage.stageName,
        })),
      );

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.updateBufferStages: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–µ–π –±—É—Ñ–µ—Ä–∞ ID: ${bufferId} –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  @Delete('stages/:bufferStageId')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å –±—É—Ñ–µ—Ä–∞ —Å —ç—Ç–∞–ø–æ–º' })
  @ApiParam({ name: 'bufferStageId', description: 'ID —Å–≤—è–∑–∏ –±—É—Ñ–µ—Ä-—ç—Ç–∞–ø' })
  @ApiResponse({ status: 200, description: '–°–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' })
  @HttpCode(HttpStatus.OK)
  async deleteBufferStage(
    @Param('bufferStageId', ParseIntPipe) bufferStageId: number,
  ) {
    const startTime = Date.now();
    this.logger.log(
      `üóëÔ∏è BuffersController.deleteBufferStage: –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ ID: ${bufferStageId}`,
    );

    try {
      const result =
        await this.bufferStagesService.deleteBufferStage(bufferStageId);
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.deleteBufferStage: –°–≤—è–∑—å ID: ${bufferStageId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∑–∞ ${executionTime}ms`,
      );
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å–≤—è–∑—å –±—É—Ñ–µ—Ä-—ç—Ç–∞–ø ID: ${bufferStageId}`);

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.deleteBufferStage: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ ID: ${bufferStageId} –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  // ================================
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  // ================================

  @Get('stages/available')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã –¥–ª—è –±—É—Ñ–µ—Ä–æ–≤' })
  @ApiResponse({ status: 200, description: '–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã –ø–æ–ª—É—á–µ–Ω—ã' })
  async getAvailableStages() {
    const startTime = Date.now();
    this.logger.log(
      'üîç BuffersController.getAvailableStages: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤',
    );

    try {
      const result = await this.bufferStagesService.getAvailableStages();
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.getAvailableStages: –ü–æ–ª—É—á–µ–Ω–æ ${result.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –∑–∞ ${executionTime}ms`,
      );
      console.log(
        'üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã:',
        result.map((s) => ({ id: s.stageId, name: s.stageName })),
      );

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.getAvailableStages: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }

  @Get('stages/with-buffers')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–∏—Ç—å —ç—Ç–∞–ø—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –±—É—Ñ–µ—Ä–∞—Ö',
  })
  @ApiResponse({ status: 200, description: '–≠—Ç–∞–ø—ã —Å –±—É—Ñ–µ—Ä–∞–º–∏ –ø–æ–ª—É—á–µ–Ω—ã' })
  async getStagesWithBuffers(): Promise<StagesWithBuffersResponse[]> {
    const startTime = Date.now();
    this.logger.log(
      'üîç BuffersController.getStagesWithBuffers: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—É—Ñ–µ—Ä–∞—Ö',
    );

    try {
      const result = await this.bufferStagesService.getStagesWithBuffers();
      const executionTime = Date.now() - startTime;

      this.logger.log(
        `‚úÖ BuffersController.getStagesWithBuffers: –ü–æ–ª—É—á–µ–Ω–æ ${result.length} —ç—Ç–∞–ø–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—É—Ñ–µ—Ä–∞—Ö –∑–∞ ${executionTime}ms`,
      );
      console.log(
        'üìä –≠—Ç–∞–ø—ã —Å –±—É—Ñ–µ—Ä–∞–º–∏:',
        result.map((s) => ({
          id: s.stageId,
          name: s.stageName,
          buffersCount: s.buffersCount,
        })),
      );

      return result;
    } catch (error) {
      const executionTime = Date.now() - startTime;
      this.logger.error(
        `‚ùå BuffersController.getStagesWithBuffers: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç—Ç–∞–ø–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—É—Ñ–µ—Ä–∞—Ö –∑–∞ ${executionTime}ms`,
        error.stack,
      );
      throw error;
    }
  }
}
