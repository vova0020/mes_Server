import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Param,
  ParseIntPipe,
  HttpStatus,
  HttpException,
  ValidationPipe,
  UsePipes,
} from '@nestjs/common';
import {
  IsString,
  IsEnum,
  IsNumber,
  IsBoolean,
  IsOptional,
  Min,
  MaxLength,
} from 'class-validator';
import { Transform } from 'class-transformer';
import { MachinesService } from '../../services/machines/machines.service';
import { EventsService } from '../../../websocket/services/events.service';

// DTO –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
export class CreateMachineDto {
  @IsString({ message: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π' })
  @MaxLength(100, { message: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤' })
  machineName: string;

  @IsEnum(['ACTIVE', 'INACTIVE', 'MAINTENANCE'], {
    message: '–°—Ç–∞—ÇÔøΩÔøΩ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ACTIVE, INACTIVE –∏–ª–∏ MAINTENANCE',
  })
  status: 'ACTIVE' | 'INACTIVE' | 'MAINTENANCE';

  @IsNumber({}, { message: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º' })
  @Min(0, { message: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π' })
  @Transform(({ value }) => parseFloat(value))
  recommendedLoad: number;

  @IsString({ message: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π' })
  @MaxLength(20, { message: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤' })
  loadUnit: string;

  @IsBoolean({ message: '–ò–∑–º–µ–Ω—è–µ–º–æ—Å—Ç—å –∑–∞–¥–∞—á –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º' })
  @Transform(({ value }) => {
    if (typeof value === 'string') {
      return value.toLowerCase() === 'true';
    }
    return Boolean(value);
  })
  isTaskChangeable: boolean;
}

// DTO –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
export class UpdateMachineDto {
  @IsOptional()
  @IsString({ message: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π' })
  @MaxLength(100, { message: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤' })
  machineName?: string;

  @IsOptional()
  @IsEnum(['ACTIVE', 'INACTIVE', 'MAINTENANCE'], {
    message: '–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ACTIVE, INACTIVE –∏–ª–∏ MAINTENANCE',
  })
  status?: 'ACTIVE' | 'INACTIVE' | 'MAINTENANCE';

  @IsOptional()
  @IsNumber({}, { message: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º' })
  @Min(0, { message: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π' })
  @Transform(({ value }) => parseFloat(value))
  recommendedLoad?: number;

  @IsOptional()
  @IsString({ message: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π' })
  @MaxLength(20, { message: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤' })
  loadUnit?: string;

  @IsOptional()
  @IsBoolean({ message: '–ò–∑–º–µ–Ω—è–µ–º–æ—Å—Ç—å –∑–∞–¥–∞—á –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º' })
  @Transform(({ value }) => {
    if (typeof value === 'string') {
      return value.toLowerCase() === 'true';
    }
    return Boolean(value);
  })
  isTaskChangeable?: boolean;
}

// DTO –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑—è–º–∏ —Å —ç—Ç–∞–ø–∞–º–∏
export class MachineStageDto {
  @IsNumber({}, { message: 'ID —ç—Ç–∞–ø–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º' })
  @Transform(({ value }) => parseInt(value))
  stageId: number;
}

export class MachineSubstageDto {
  @IsNumber({}, { message: 'ID –ø–æ–¥—ç—Ç–∞–ø–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º' })
  @Transform(({ value }) => parseInt(value))
  substageId: number;
}

@Controller('machines')
@UsePipes(
  new ValidationPipe({
    whitelist: true,
    forbidNonWhitelisted: true,
    transform: true,
    transformOptions: {
      enableImplicitConversion: true,
    },
    exceptionFactory: (errors) => {
      const messages = errors.map((error) => {
        const constraints = Object.values(error.constraints || {});
        return constraints.join(', ');
      });
      return new HttpException(
        {
          message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
          errors: messages,
        },
        HttpStatus.BAD_REQUEST,
      );
    },
  }),
)
export class MachinesController {
  constructor(
    private readonly machinesService: MachinesService,
    private readonly eventsService: EventsService,
  ) {
    console.log('üéÆ MachinesController: –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞–Ω–∫–∏
  @Get()
  async findAll() {
    console.log('üåê GET /machines - –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Å—Ç–∞–Ω–∫–æ–≤');

    try {
      const startTime = Date.now();
      const result = await this.machinesService.findAll();
      const duration = Date.now() - startTime;

      console.log(
        `‚úÖ GET /machines - –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${result.length} —Å—Ç–∞–Ω–∫–æ–≤ –∑–∞ ${duration}ms`,
      );
      return result;
    } catch (error) {
      console.error(
        '‚ùå GET /machines - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω–∫–æ–≤:',
        error,
      );
      throw new HttpException(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω–∫–æ–≤',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã —Å –ø–æ–¥—ç—Ç–∞–ø–∞–º–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
  @Get('available/stages-with-substages')
  async getAllStagesWithSubstages() {
    console.log(
      'üåê GET /machines/available/stages-with-substages - –ó–∞–ø—Ä–æ—Å —ç—Ç–∞–ø–æ–≤ —Å –ø–æ–¥—ç—Ç–∞–ø–∞–º–∏',
    );

    try {
      const startTime = Date.now();
      const result = await this.machinesService.getAllStagesWithSubstages();
      const duration = Date.now() - startTime;

      console.log(
        `‚úÖ GET /machines/available/stages-with-substages - –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${result.length} —ç—Ç–∞–ø–æ–≤ –∑–∞ ${duration}ms`,
      );
      return result;
    } catch (error) {
      console.error(
        '‚ùå GET /machines/available/stages-with-substages - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç—Ç–∞–ø–æ–≤ —Å –ø–æ–¥—ç—Ç–∞–ø–∞–º–∏:',
        error,
      );
      throw new HttpException(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç—Ç–∞–ø–æ–≤ —Å –ø–æ–¥—ç—Ç–∞–ø–∞–º–∏',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥—ç—Ç–∞–ø—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–∞–ø–∞–º
  @Get('available/substages-grouped')
  async getAllSubstagesGrouped() {
    console.log(
      'üåê GET /machines/available/substages-grouped - –ó–∞–ø—Ä–æ—Å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—ç—Ç–∞–ø–æ–≤',
    );

    try {
      const startTime = Date.now();
      const result = await this.machinesService.getAllSubstagesGrouped();
      const duration = Date.now() - startTime;

      console.log(
        `‚úÖ GET /machines/available/substages-grouped - –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${result.length} –ø–æ–¥—ç—Ç–∞–ø–æ–≤ –∑–∞ ${duration}ms`,
      );
      return result;
    } catch (error) {
      console.error(
        '‚ùå GET /machines/available/substages-grouped - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—ç—Ç–∞–ø–æ–≤:',
        error,
      );
      throw new HttpException(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—ç—Ç–∞–ø–æ–≤',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç—Ç–∞–ø–æ–≤ –∏ –ø–æ–¥—ç—Ç–∞–ø–æ–≤
  @Get('statistics/stages')
  async getStagesStatistics() {
    console.log(
      'üåê GET /machines/statistics/stages - –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç—Ç–∞–ø–æ–≤',
    );

    try {
      const startTime = Date.now();
      const result = await this.machinesService.getStagesStatistics();
      const duration = Date.now() - startTime;

      console.log(
        `‚úÖ GET /machines/statistics/stages - –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${duration}ms:`,
        JSON.stringify(result, null, 2),
      );
      return result;
    } catch (error) {
      console.error(
        '‚ùå GET /machines/statistics/stages - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:',
        error,
      );
      throw new HttpException(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å—Ç–∞–Ω–∫—É
  @Get('available/stages')
  async getAvailableStages() {
    console.log('üåê GET /machines/available/stages - –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤');

    try {
      const startTime = Date.now();
      const result = await this.machinesService.getAvailableStages();
      const duration = Date.now() - startTime;

      console.log(
        `‚úÖ GET /machines/available/stages - –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${result.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –∑–∞ ${duration}ms`,
      );
      return result;
    } catch (error) {
      console.error(
        '‚ùå GET /machines/available/stages - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤:',
        error,
      );
      throw new HttpException(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥—ç—Ç–∞–ø—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
  @Get('available/substages/:stageId')
  async getAvailableSubstages(@Param('stageId', ParseIntPipe) stageId: number) {
    console.log(
      `üåê GET /machines/available/substages/${stageId} - –ó–∞–ø—Ä–æ—Å –ø–æ–¥—ç—Ç–∞–ø–æ–≤ –¥–ª—è —ç—Ç–∞–ø–∞ ${stageId}`,
    );

    try {
      const startTime = Date.now();
      const result = await this.machinesService.getAvailableSubstages(stageId);
      const duration = Date.now() - startTime;

      console.log(
        `‚úÖ GET /machines/available/substages/${stageId} - –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${result.length} –ø–æ–¥—ç—Ç–∞–ø–æ–≤ –∑–∞ ${duration}ms`,
      );
      return result;
    } catch (error) {
      console.error(
        `‚ùå GET /machines/available/substages/${stageId} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—ç—Ç–∞–ø–æ–≤:`,
        error,
      );
      throw new HttpException(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—ç—Ç–∞–ø–æ–≤',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–æ–∫ –ø–æ ID
  @Get(':id')
  async findOne(@Param('id', ParseIntPipe) id: number) {
    console.log(`üåê GET /machines/${id} - –ó–∞–ø—Ä–æ—Å —Å—Ç–∞–Ω–∫–∞ –ø–æ ID ${id}`);

    try {
      const startTime = Date.now();
      const machine = await this.machinesService.findOne(id);
      const duration = Date.now() - startTime;

      if (!machine) {
        console.log(`‚ö†Ô∏è GET /machines/${id} - –°—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw new HttpException('–°—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', HttpStatus.NOT_FOUND);
      }

      console.log(
        `‚úÖ GET /machines/${id} - –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–æ–∫ "${machine.machineName}" –∑–∞ ${duration}ms`,
      );
      return machine;
    } catch (error) {
      if (error instanceof HttpException) {
        throw error;
      }
      console.error(
        `‚ùå GET /machines/${id} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞:`,
        error,
      );
      throw new HttpException(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫
  @Post()
  async create(@Body() createMachineDto: CreateMachineDto) {
    console.log('üåê POST /machines - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω–∫–∞');
    console.log(
      'üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:',
      JSON.stringify(createMachineDto, null, 2),
    );

    try {
      const startTime = Date.now();
      const newMachine = await this.machinesService.create(createMachineDto);
      const duration = Date.now() - startTime;

      console.log(
        `‚úÖ POST /machines - –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å—Ç–∞–Ω–æ–∫ "${newMachine.machineName}" (ID: ${newMachine.machineId}) –∑–∞ ${duration}ms`,
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ WebSocket
      console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞');
      this.eventsService.emitToRoom('machines', 'machineCreated', {
        machine: newMachine,
        message: `–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫: ${newMachine.machineName}`,
      });
      console.log('‚úÖ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      return newMachine;
    } catch (error) {
      console.error('‚ùå POST /machines - –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞:', error);
      throw new HttpException(
        error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞',
        HttpStatus.BAD_REQUEST,
      );
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–æ–∫
  @Put(':id')
  async update(
    @Param('id', ParseIntPipe) id: number,
    @Body() updateMachineDto: UpdateMachineDto,
  ) {
    console.log(`üåê PUT /machines/${id} - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ ID ${id}`);
    console.log(
      'üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:',
      JSON.stringify(updateMachineDto, null, 2),
    );

    try {
      const startTime = Date.now();
      const updatedMachine = await this.machinesService.update(
        id,
        updateMachineDto,
      );
      const duration = Date.now() - startTime;

      if (!updatedMachine) {
        console.log(`‚ö†Ô∏è PUT /machines/${id} - –°—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw new HttpException('–°—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', HttpStatus.NOT_FOUND);
      }

      console.log(
        `‚úÖ PUT /machines/${id} - –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–æ–∫ "${updatedMachine.machineName}" –∑–∞ ${duration}ms`,
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ WebSocket
      console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞');
      this.eventsService.emitToRoom('machines', 'machineUpdated', {
        machine: updatedMachine,
        message: `–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–æ–∫: ${updatedMachine.machineName}`,
      });
      console.log('‚úÖ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      return updatedMachine;
    } catch (error) {
      if (error instanceof HttpException) {
        throw error;
      }
      console.error(
        `‚ùå PUT /machines/${id} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞:`,
        error,
      );
      throw new HttpException(
        error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞',
        HttpStatus.BAD_REQUEST,
      );
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞–Ω–æ–∫
  @Delete(':id')
  async remove(@Param('id', ParseIntPipe) id: number) {
    console.log(`üåê DELETE /machines/${id} - –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ ID ${id}`);

    try {
      const startTime = Date.now();
      const deletedMachine = await this.machinesService.remove(id);
      const duration = Date.now() - startTime;

      if (!deletedMachine) {
        console.log(`‚ö†Ô∏è DELETE /machines/${id} - –°—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw new HttpException('–°—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', HttpStatus.NOT_FOUND);
      }

      console.log(
        `‚úÖ DELETE /machines/${id} - –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å—Ç–∞–Ω–æ–∫ "${deletedMachine.machineName}" –∑–∞ ${duration}ms`,
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ WebSocket
      console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞');
      this.eventsService.emitToRoom('machines', 'machineDeleted', {
        machineId: id,
        message: `–£–¥–∞–ª–µ–Ω —Å—Ç–∞–Ω–æ–∫: ${deletedMachine.machineName}`,
      });
      console.log('‚úÖ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      return { message: '–°—Ç–∞–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' };
    } catch (error) {
      if (error instanceof HttpException) {
        throw error;
      }
      console.error(
        `‚ùå DELETE /machines/${id} - –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞:`,
        error,
      );
      throw new HttpException(
        error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞',
        HttpStatus.BAD_REQUEST,
      );
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å —Å —ç—Ç–∞–ø–æ–º 1-–≥–æ —É—Ä–æ–≤–Ω—è
  @Post(':id/stages')
  async addStage(
    @Param('id', ParseIntPipe) machineId: number,
    @Body() machineStageDto: MachineStageDto,
  ) {
    console.log(
      `üåê POST /machines/${machineId}/stages - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ —Å—Ç–∞–Ω–∫–∞ ${machineId} —Å —ç—Ç–∞–ø–æ–º ${machineStageDto.stageId}`,
    );
    console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(machineStageDto, null, 2));

    try {
      const startTime = Date.now();
      const result = await this.machinesService.addStage(
        machineId,
        machineStageDto.stageId,
      );
      const duration = Date.now() - startTime;

      console.log(
        `‚úÖ POST /machines/${machineId}/stages - –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å –∑–∞ ${duration}ms`,
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
      console.log(
        'üì° –û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å —ç—Ç–∞–ø–æ–º',
      );
      this.eventsService.emitToRoom('machines', 'machineStageAdded', {
        machineId,
        stageId: machineStageDto.stageId,
        result,
        message: `–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å —Å—Ç–∞–Ω–∫–∞ —Å —ç—Ç–∞–ø–æ–º`,
      });
      console.log('‚úÖ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      return result;
    } catch (error) {
      console.error(
        `‚ùå POST /machines/${machineId}/stages - –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å —ç—Ç–∞–ø–æ–º:`,
        error,
      );
      throw new HttpException(
        error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å —ç—Ç–∞–ø–æ–º',
        HttpStatus.BAD_REQUEST,
      );
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å —Å —ç—Ç–∞–ø–æ–º 1-–≥–æ —É—Ä–æ–≤–Ω—è
  @Delete(':id/stages/:stageId')
  async removeStage(
    @Param('id', ParseIntPipe) machineId: number,
    @Param('stageId', ParseIntPipe) stageId: number,
  ) {
    console.log(
      `üåê DELETE /machines/${machineId}/stages/${stageId} - –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ —Å—Ç–∞–Ω–∫–∞ ${machineId} —Å —ç—Ç–∞–ø–æ–º ${stageId}`,
    );

    try {
      const startTime = Date.now();
      await this.machinesService.removeStage(machineId, stageId);
      const duration = Date.now() - startTime;

      console.log(
        `‚úÖ DELETE /machines/${machineId}/stages/${stageId} - –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å–≤—è–∑—å –∑–∞ ${duration}ms`,
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
      console.log(
        'üì° –û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å —ç—Ç–∞–ø–æ–º',
      );
      this.eventsService.emitToRoom('machines', 'machineStageRemoved', {
        machineId,
        stageId,
        message: `–£–¥–∞–ª–µ–Ω–∞ —Å–≤—è–∑—å —Å—Ç–∞–Ω–∫–∞ —Å —ç—Ç–∞–ø–æ–º`,
      });
      console.log('‚úÖ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      return { message: '–°–≤—è–∑—å —Å —ç—Ç–∞–ø–æ–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' };
    } catch (error) {
      console.error(
        `‚ùå DELETE /machines/${machineId}/stages/${stageId} - –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å —ç—Ç–∞–ø–æ–º:`,
        error,
      );
      throw new HttpException(
        error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å —ç—Ç–∞–ø–æ–º',
        HttpStatus.BAD_REQUEST,
      );
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º 2-–≥–æ —É—Ä–æ–≤–Ω—è
  @Post(':id/substages')
  async addSubstage(
    @Param('id', ParseIntPipe) machineId: number,
    @Body() machineSubstageDto: MachineSubstageDto,
  ) {
    console.log(
      `üåê POST /machines/${machineId}/substages - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ —Å—Ç–∞–Ω–∫–∞ ${machineId} —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º ${machineSubstageDto.substageId}`,
    );
    console.log(
      'üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:',
      JSON.stringify(machineSubstageDto, null, 2),
    );

    try {
      const startTime = Date.now();
      const result = await this.machinesService.addSubstage(
        machineId,
        machineSubstageDto.substageId,
      );
      const duration = Date.now() - startTime;

      console.log(
        `‚úÖ POST /machines/${machineId}/substages - –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å –∑–∞ ${duration}ms`,
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
      console.log(
        'üì° –û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º',
      );
      this.eventsService.emitToRoom('machines', 'machineSubstageAdded', {
        machineId,
        substageId: machineSubstageDto.substageId,
        result,
        message: `–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å —Å—Ç–∞–Ω–∫–∞ —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º`,
      });
      console.log('‚úÖ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      return result;
    } catch (error) {
      console.error(
        `‚ùå POST /machines/${machineId}/substages - –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º:`,
        error,
      );
      throw new HttpException(
        error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º',
        HttpStatus.BAD_REQUEST,
      );
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º 2-–≥–æ —É—Ä–æ–≤–Ω—è
  @Delete(':id/substages/:substageId')
  async removeSubstage(
    @Param('id', ParseIntPipe) machineId: number,
    @Param('substageId', ParseIntPipe) substageId: number,
  ) {
    console.log(
      `üåê DELETE /machines/${machineId}/substages/${substageId} - –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ —Å—Ç–∞–Ω–∫–∞ ${machineId} —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º ${substageId}`,
    );

    try {
      const startTime = Date.now();
      await this.machinesService.removeSubstage(machineId, substageId);
      const duration = Date.now() - startTime;

      console.log(
        `‚úÖ DELETE /machines/${machineId}/substages/${substageId} - –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å–≤—è–∑—å –∑–∞ ${duration}ms`,
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
      console.log(
        'üì° –û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º',
      );
      this.eventsService.emitToRoom('machines', 'machineSubstageRemoved', {
        machineId,
        substageId,
        message: `–£–¥–∞–ª–µ–Ω–∞ —Å–≤—è–∑—å —Å—Ç–∞–Ω–∫–∞ —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º`,
      });
      console.log('‚úÖ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

      return { message: '–°–≤—è–∑—å —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' };
    } catch (error) {
      console.error(
        `‚ùå DELETE /machines/${machineId}/substages/${substageId} - –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º:`,
        error,
      );
      throw new HttpException(
        error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å –ø–æ–¥—ç—Ç–∞–ø–æ–º',
        HttpStatus.BAD_REQUEST,
      );
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã –∏ –ø–æ–¥—ç—Ç–∞–ø—ã –¥–ª—è —Å—Ç–∞–Ω–∫–∞
  @Get(':id/stages')
  async getMachineStages(@Param('id', ParseIntPipe) machineId: number) {
    console.log(
      `üåê GET /machines/${machineId}/stages - –ó–∞–ø—Ä–æ—Å —ç—Ç–∞–ø–æ–≤ –¥–ª—è —Å—Ç–∞–Ω–∫–∞ ${machineId}`,
    );

    try {
      const startTime = Date.now();
      const result = await this.machinesService.getMachineStages(machineId);
      const duration = Date.now() - startTime;

      console.log(
        `‚úÖ GET /machines/${machineId}/stages - –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —ç—Ç–∞–ø—ã —Å—Ç–∞–Ω–∫–∞ –∑–∞ ${duration}ms`,
      );
      console.log(
        `üìä –°—Ç–∞–Ω–æ–∫ "${result.machine.machineName}" –∏–º–µ–µ—Ç ${result.stages.length} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤`,
      );

      return result;
    } catch (error) {
      console.error(
        `‚ùå GET /machines/${machineId}/stages - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç—Ç–∞–ø–æ–≤ —Å—Ç–∞–Ω–∫–∞:`,
        error,
      );
      throw new HttpException(
        error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç—Ç–∞–ø–æ–≤ —Å—Ç–∞–Ω–∫–∞',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }
}