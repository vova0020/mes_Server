import { Injectable, UnauthorizedException } from '@nestjs/common';
import { LoginDto } from '../dto/login.dto';
import { JwtService } from '@nestjs/jwt';
import { LoginResponseDto } from '../dto/login-response.dto';
import * as bcrypt from 'bcrypt';
import { Request } from 'express';
import { PrismaService } from '../../../shared/prisma.service';

@Injectable()
export class AuthService {
  constructor(
    private readonly jwtService: JwtService,
    private readonly prisma: PrismaService,
  ) {
    console.log('üîß AuthService constructor initialized');
  }

  async validateUserAndGenerateToken(
    dto: LoginDto,
    req?: Request,
  ): Promise<LoginResponseDto> {
    console.log('üöÄ === –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===');
    console.log('üìã Login DTO:', dto);

    const ip = req ? req.ip || 'unknown' : 'unknown';
    const userAgent = req ? req.headers['user-agent'] || 'unknown' : 'unknown';

    console.log('üåê IP –∞–¥—Ä–µ—Å:', ip);
    console.log('üñ•Ô∏è User Agent:', userAgent);

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ login (–≤–º–µ—Å—Ç–æ username)
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ login:', dto.username);
    const user = await this.prisma.user.findUnique({
      where: { login: dto.username },
      include: {
        userDetail: true,
        userRoles: {
          include: {
            role: true,
          },
        },
      },
    });

    console.log(
      'üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
      user ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω',
    );
    if (user) {
      console.log('üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.userId);
      console.log('üë§ Login –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.login);
      console.log('üë§ UserDetail:', user.userDetail);
      console.log('üë§ UserRoles –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', user.userRoles.length);
      console.log('üë§ UserRoles –¥–µ—Ç–∞–ª–∏:', user.userRoles);
    }

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –ª–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É');
      await this.recordLoginLog(null, ip, userAgent, false);
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
    }

    console.log('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...');
    const isPasswordValid = await bcrypt.compare(dto.password, user.password);
    console.log(
      'üîí –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:',
      isPasswordValid ? '–í–µ—Ä–Ω—ã–π' : '–ù–µ–≤–µ—Ä–Ω—ã–π',
    );

    if (!isPasswordValid) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å - –ª–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É');
      await this.recordLoginLog(user.userId, ip, userAgent, false);
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
    }

    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π - –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥');
    await this.recordLoginLog(user.userId, ip, userAgent, true);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üé≠ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const roles = user.userRoles.map((ur) => ur.role.roleName);
    const primaryRole = roles[0];

    console.log('üé≠ –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', roles);
    console.log('üé≠ –û—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å:', primaryRole);

    // –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è JWT-—Ç–æ–∫–µ–Ω–∞
    const payload = {
      sub: user.userId,
      login: user.login,
      roles: roles,
      primaryRole: primaryRole,
    };

    console.log('üîê JWT Payload:', payload);
    const token = this.jwtService.sign(payload);
    console.log('üîê JWT Token —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞:', token.length);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —ç—Ç–∞–ø–∞—Ö
    console.log('üè≠ –ü–æ–ª—É—á–µ–Ω–∏–µ assignments –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const assignments = await this.getUserStageAssignments(user.userId, roles);
    console.log('üè≠ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ assignments:', assignments);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø—Ä–∏–≤—è–∑–∫–∞–º–∏
    const response: LoginResponseDto = {
      token,
      user: {
        id: user.userId,
        login: user.login,
        roles: roles,
        primaryRole: primaryRole,
        fullName: user.userDetail
          ? `${user.userDetail.firstName} ${user.userDetail.lastName}`
          : undefined,
        firstName: user.userDetail?.firstName,
        lastName: user.userDetail?.lastName,
        position: user.userDetail?.position || undefined,
      },
      assignments,
    };

    console.log('üì§ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç LoginResponseDto:');
    console.log('üì§ Token –¥–ª–∏–Ω–∞:', response.token.length);
    console.log('üì§ User –¥–∞–Ω–Ω—ã–µ:', response.user);
    console.log('üì§ Assignments:', response.assignments);
    console.log('‚úÖ === –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ===');

    return response;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —ç—Ç–∞–ø–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async getUserStageAssignments(userId: number, roles: string[]) {
    console.log('üè≠ === –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è assignments ===');
    console.log('üè≠ UserId:', userId);
    console.log('üè≠ Roles:', roles);

    const assignments: any = {};

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏
    const isOperator = this.hasOperatorRole(roles);
    const isMaster = this.hasMasterRole(roles);
    const isPicker = this.hasPickerRole(roles);
    const isAdmin = this.hasAdminRole(roles);

    console.log('üè≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π:');
    console.log('üè≠ - isOperator:', isOperator);
    console.log('üè≠ - isMaster:', isMaster);
    console.log('üè≠ - isPicker:', isPicker);
    console.log('üè≠ - isAdmin:', isAdmin);

    // –î–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —ç—Ç–∞–ø—ã
    if (isOperator || isMaster) {
      console.log('üè≠ –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —ç—Ç–∞–ø—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞/–º–∞—Å—Ç–µ—Ä–∞...');

      const stages = await this.prisma.productionStageLevel1.findMany({
        include: {
          productionStagesLevel2: true,
          linesStages: {
            include: {
              line: true,
            },
          },
        },
      });

      console.log('üè≠ –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —ç—Ç–∞–ø–æ–≤ Level1:', stages.length);

      assignments.stages = stages.map((stage) => {
        const stageData = {
          id: stage.stageId,
          name: stage.stageName,
          description: stage.description,
          substages: stage.productionStagesLevel2.map((substage) => ({
            id: substage.substageId,
            name: substage.substageName,
            description: substage.description,
            allowance: substage.allowance,
          })),
          lines: stage.linesStages.map((ls) => ({
            id: ls.line.lineId,
            name: ls.line.lineName,
            type: ls.line.lineType,
          })),
        };

        console.log(`üè≠ –≠—Ç–∞–ø ${stage.stageId} (${stage.stageName}):`, {
          subsStages: stage.productionStagesLevel2.length,
          lines: stage.linesStages.length,
        });

        return stageData;
      });

      console.log('üè≠ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ stages:', assignments.stages.length);
    }

    // –î–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏
    if (isOperator) {
      console.log('üè≠ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...');

      const machines = await this.prisma.machine.findMany({
        include: {
          machinesStages: {
            include: {
              stage: true,
            },
          },
        },
      });

      console.log('üè≠ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω–∫–æ–≤:', machines.length);

      assignments.machines = machines.map((machine) => {
        const machineData = {
          id: machine.machineId,
          name: machine.machineName,
          status: machine.status,
          recommendedLoad: machine.recommendedLoad,
          loadUnit: machine.loadUnit,
          stages: machine.machinesStages.map((ms) => ({
            id: ms.stage.stageId,
            name: ms.stage.stageName,
          })),
        };

        console.log(
          `üè≠ –°—Ç–∞–Ω–æ–∫ ${machine.machineId} (${machine.machineName}):`,
          {
            status: machine.status,
            stages: machine.machinesStages.length,
          },
        );

        return machineData;
      });

      console.log('üè≠ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ machines:', assignments.machines.length);
    }

    // –î–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–æ–≤ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ picker
    if (isPicker) {
      console.log('üè≠ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é picker –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∞...');

      const picker = await this.prisma.picker.findFirst({
        where: { userId: userId },
      });

      console.log(
        'üè≠ –ù–∞–π–¥–µ–Ω picker:',
        picker ? `ID: ${picker.pickerId}` : '–ù–µ –Ω–∞–π–¥–µ–Ω',
      );

      if (picker) {
        assignments.picker = {
          id: picker.pickerId,
          userId: picker.userId,
        };
        console.log('üè≠ –î–æ–±–∞–≤–ª–µ–Ω picker –≤ assignments:', assignments.picker);
      }
    }

    console.log('üè≠ === –§–∏–Ω–∞–ª—å–Ω—ã–µ assignments ===');
    console.log(
      'üè≠ stages:',
      assignments.stages ? assignments.stages.length : '–Ω–µ –∑–∞–¥–∞–Ω–æ',
    );
    console.log(
      'üè≠ machines:',
      assignments.machines ? assignments.machines.length : '–Ω–µ –∑–∞–¥–∞–Ω–æ',
    );
    console.log('üè≠ picker:', assignments.picker ? '–∑–∞–¥–∞–Ω–æ' : '–Ω–µ –∑–∞–¥–∞–Ω–æ');

    return assignments;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
  private hasOperatorRole(roles: string[]): boolean {
    const result = roles.some(
      (role) =>
        role.toLowerCase().includes('operator') ||
        role.toLowerCase().includes('–æ–ø–µ—Ä–∞—Ç–æ—Ä'),
    );
    console.log('üé≠ hasOperatorRole check:', roles, '=> result:', result);
    return result;
  }

  private hasMasterRole(roles: string[]): boolean {
    const result = roles.some(
      (role) =>
        role.toLowerCase().includes('master') ||
        role.toLowerCase().includes('–º–∞—Å—Ç–µ—Ä'),
    );
    console.log('üé≠ hasMasterRole check:', roles, '=> result:', result);
    return result;
  }

  private hasPickerRole(roles: string[]): boolean {
    const result = roles.some(
      (role) =>
        role.toLowerCase().includes('picker') ||
        role.toLowerCase().includes('–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫'),
    );
    console.log('üé≠ hasPickerRole check:', roles, '=> result:', result);
    return result;
  }

  private hasAdminRole(roles: string[]): boolean {
    const result = roles.some(
      (role) =>
        role.toLowerCase().includes('admin') ||
        role.toLowerCase().includes('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'),
    );
    console.log('üé≠ hasAdminRole check:', roles, '=> result:', result);
    return result;
  }

  // –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
  private async recordLoginLog(
    userId: number | null,
    ip: string,
    userAgent: string,
    success: boolean,
  ) {
    console.log('üìù === –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –≤—Ö–æ–¥–∞ ===');
    console.log('üìù UserId:', userId);
    console.log('üìù IP:', ip);
    console.log('üìù UserAgent:', userAgent);
    console.log('üìù Success:', success);

    try {
      await this.prisma.loginLog.create({
        data: {
          userId,
          ipAddress: ip,
          deviceInfo: userAgent,
          attemptTime: new Date(),
          success,
        },
      });
      console.log('üìù ‚úÖ –õ–æ–≥ –≤—Ö–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω');
    } catch (error) {
      console.log('üìù ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –≤—Ö–æ–¥–∞:', error);
    }
  }
}
