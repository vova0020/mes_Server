/**
 * ===== MAIN WEBSOCKET GATEWAY =====
 *
 * –û—Å–Ω–æ–≤–Ω–æ–π WebSocket Gateway –¥–ª—è MES —Å–∏—Å—Ç–µ–º—ã.
 * –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
 *
 * –ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ –°–û–ï–î–ò–ù–ï–ù–ò–ô:
 * - –£—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–≤—ã—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 * - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–∞–∑–æ–≤–∞—è)
 * - –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º
 *
 * –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ù–ê–¢–ê–ú–ò:
 * - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∫–æ–º–Ω–∞—Ç–∞–º
 * - –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–º–Ω–∞—Ç
 * - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
 * - –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –∫–æ–º–Ω–∞—Ç–∞–º
 *
 * –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô:
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
 * - –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 *
 * –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç
 * - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏–∑ @nestjs/websockets
import {
  WebSocketGateway, // –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è WebSocket Gateway
  WebSocketServer, // –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏ Socket.IO —Å–µ—Ä–≤–µ—Ä–∞
  OnGatewayInit, // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—É–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gateway
  OnGatewayConnection, // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—É–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  OnGatewayDisconnect, // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—É–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  SubscribeMessage, // –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  MessageBody, // –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  ConnectedSocket, // –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ Socket
} from '@nestjs/websockets';

// –ò–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –∏–∑ socket.io –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket
import { Server, Socket } from 'socket.io';

// –ò–º–ø–æ—Ä—Ç Logger –∏–∑ NestJS –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
import { Logger } from '@nestjs/common';

// –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–∫–µ—Ç–∞–º–∏ –∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏
import { SocketService } from '../services/socket.service';
import { RoomService } from '../services/room.service';

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏
import { EVENTS } from '../constants/events.constants';
import { ROOMS } from '../constants/rooms.constants';

/**
 * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä @WebSocketGateway –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä.
 *
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
 * - cors: { origin: true } - —Ä–∞–∑—Ä–µ—à–∞–µ—Ç CORS –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –ª—é–±—ã—Ö –¥–æ–º–µ–Ω–æ–≤
 *   –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å–ª–µ–¥—É–µ—Ç —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
@WebSocketGateway({ cors: { origin: true } })
export class MainGateway
  implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect
{
  /**
   * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π Gateway.
   * readonly - —Å—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è.
   * MainGateway.name - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–º—è –∫–ª–∞—Å—Å–∞ –≤ –ª–æ–≥–∞—Ö.
   */
  private readonly logger = new Logger(MainGateway.name);

  /**
   * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä @WebSocketServer –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω—ä–µ–∫—Ç–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Socket.IO —Å–µ—Ä–≤–µ—Ä–∞.
   * –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏.
   */
  @WebSocketServer() server: Server;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Gateway —Å –∏–Ω—ä–µ–∫—Ü–∏–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
   * NestJS –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –∏ –ø–µ—Ä–µ–¥–∞—Å—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤.
   *
   * @param socketService - —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param roomService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–∞–º–∏
   */
  constructor(
    private readonly socketService: SocketService,
    private readonly roomService: RoomService,
  ) {}

  /**
   * === –•–£–ö–ò –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê GATEWAY ===
   * –ú–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è NestJS –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
   */

  /**
   * –•—É–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gateway.
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ –¥–æ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –µ–≥–æ —Å—Å—ã–ª–∫–∏ –≤ SocketService.
   *
   * @param server - —ç–∫–∑–µ–º–ø–ª—è—Ä Socket.IO —Å–µ—Ä–≤–µ—Ä–∞
   */
  afterInit(server: Server) {
    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    this.logger.log('WebSocket gateway initialized with fixed rooms');

    // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ SocketService –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.socketService.setServer(server);
  }

  /**
   * –•—É–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.
   *
   * @param client - –æ–±—ä–µ–∫—Ç Socket –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
   */
  async handleConnection(client: Socket) {
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    client.onAny((event, ...args) => {
      this.logger.warn(
        `üì° CLIENT EVENT: ${client.id} sent event "${event}" with data:`,
        args,
      );
    });
    try {
      /**
       * –ë–ê–ó–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
       * –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
       * —á–µ—Ä–µ–∑ JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ—Ö–∞–Ω–∏–∑–º
       */

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const anonUserId = `anon:${client.id}`;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –æ–±—ä–µ–∫—Ç–µ Socket
      // (client as any) - –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞, —Ç–∞–∫ –∫–∞–∫ TypeScript –Ω–µ –∑–Ω–∞–µ—Ç –æ –Ω–∞—à–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏
      (client as any).user = {
        userId: anonUserId, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        email: undefined, // Email –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      };

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      this.logger.log(
        `Client ${client.id} connected as anonymous (${anonUserId})`,
      );

      /**
       * –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ü–û –ü–ê–†–ê–ú–ï–¢–†–£ ROOM
       */
      const roomParam = client.handshake.query.room as string;
      if (roomParam && Object.values(ROOMS).includes(roomParam)) {
        await this.roomService.joinRoom(client, roomParam);
      }

      /**
       * –û–¢–ü–†–ê–í–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –î–û–°–¢–£–ü–ù–´–• –ö–û–ú–ù–ê–¢–ê–•
       * –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç, –∫ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
       */
      client.emit('available_rooms', {
        rooms: this.roomService.getAllAvailableRooms(),
        message: 'Available rooms for joining',
      });
    } catch (err) {
      /**
       * –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
       * –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
       */
      this.logger.error('Connection handling error', err as Error);

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
      client.disconnect(true);
    }
  }

  /**
   * –•—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ—Ä—è–µ—Ç —Å–≤—è–∑—å.
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.
   *
   * @param client - –æ–±—ä–µ–∫—Ç Socket –æ—Ç–∫–ª—é—á–∏–≤—à–µ–≥–æ—Å—è –∫–ª–∏–µ–Ω—Ç–∞
   */
  handleDisconnect(client: Socket) {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Socket
    const user = (client as any).user;

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    this.logger.log(
      `Client disconnected: ${client.id}${user ? ` (user ${user.userId})` : ''}`,
    );

    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Socket.IO –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –æ—Ç–∫–ª—é—á–∏–≤—à–∏—Ö—Å—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç,
    // –ø–æ—ç—Ç–æ–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
  }

  /**
   * === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ===
   * –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.
   * –ö–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –ø–æ–º–µ—á–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º @SubscribeMessage —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è.
   */

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ.
   * –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.
   *
   * @param data - –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'room'
   * @param client - –æ–±—ä–µ–∫—Ç Socket –∫–ª–∏–µ–Ω—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å
   */
  @SubscribeMessage('join_room')
  async handleJoinRoom(
    @MessageBody() data: { room: string },
    @ConnectedSocket() client: Socket,
  ) {
    /**
     * –í–ê–õ–ò–î–ê–¶–ò–Ø –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•
     * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
     */
    if (!data?.room) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É
      client.emit('error', { message: 'room is required' });
      return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    }

    /**
     * –ü–û–ü–´–¢–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ö–û–ú–ù–ê–¢–ï
     * –ò—Å–ø–æ–ª—å–∑—É–µ–º RoomService –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    const success = await this.roomService.joinRoom(client, data.room);

    if (success) {
      /**
       * –£–°–ü–ï–®–ù–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
       * –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
       */
      client.emit('joined', {
        room: data.room,
        message: `Successfully joined room: ${data.room}`,
      });
    } else {
      /**
       * –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
       * –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
       */
      client.emit('error', {
        message: `Room "${data.room}" does not exist or access denied`,
        availableRooms: this.roomService.getAllAvailableRooms(), // –ü–æ–º–æ–≥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.
   * –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã.
   *
   * @param data - –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–Ω–∞—Ç—ã
   * @param client - –æ–±—ä–µ–∫—Ç Socket –∫–ª–∏–µ–Ω—Ç–∞
   */
  @SubscribeMessage('leave_room')
  async handleLeaveRoom(
    @MessageBody() data: { room: string; force?: boolean },
    @ConnectedSocket() client: Socket,
  ) {
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò
    this.logger.warn(
      `üîç LEAVE_ROOM REQUEST: Client ${client.id} requested to leave room: ${data?.room}`,
    );

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ handleJoinRoom
    if (!data?.room) {
      client.emit('error', { message: 'room is required' });
      return;
    }

    // –û–ü–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã—Ö–æ–¥
    // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥
    /*
    if (!data.force) {
      this.logger.warn(`üö´ BLOCKED automatic leave request for room: ${data.room}`);
      client.emit('leave_blocked', {
        room: data.room,
        message: 'Automatic leave requests are blocked. Use force: true to leave manually.',
      });
      return;
    }
    */

    // –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
    const success = await this.roomService.leaveRoom(client, data.room);

    if (success) {
      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
      this.logger.warn(
        `‚úÖ CLIENT LEFT ROOM: ${client.id} successfully left ${data.room}`,
      );
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
      client.emit('left', {
        room: data.room,
        message: `Successfully left room: ${data.room}`,
      });
    } else {
      // –û—à–∏–±–∫–∞ - –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      client.emit('error', {
        message: `Room "${data.room}" does not exist`,
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.
   * –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
   *
   * @param client - –æ–±—ä–µ–∫—Ç Socket –∫–ª–∏–µ–Ω—Ç–∞
   */
  @SubscribeMessage('get_available_rooms')
  async handleGetAvailableRooms(@ConnectedSocket() client: Socket) {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
    const rooms = this.roomService.getAllAvailableRooms();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç—É
    client.emit('available_rooms', { rooms });
  }

  /**
   * === –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ë–´–°–¢–†–û–ì–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===
   */

  @SubscribeMessage('join_master_ceh')
  async handleJoinMasterCeh(@ConnectedSocket() client: Socket) {
    await this.roomService.joinMasterCeh(client);
    client.emit('joined', { room: ROOMS.MASTER_CEH });
  }

  @SubscribeMessage('join_technologist')
  async handleJoinTechnologist(@ConnectedSocket() client: Socket) {
    await this.roomService.joinTechnologist(client);
    client.emit('joined', { room: ROOMS.TECHNOLOGIST });
  }

  @SubscribeMessage('join_director')
  async handleJoinDirector(@ConnectedSocket() client: Socket) {
    await this.roomService.joinDirector(client);
    client.emit('joined', { room: ROOMS.DIRECTOR });
  }

  /**
   * === –ú–ï–¢–û–î–´ –û–¢–õ–ê–î–ö–ò ===
   * –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */

  /**
   * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö
   */
  @SubscribeMessage('debug_rooms')
  async handleDebugRooms(@ConnectedSocket() client: Socket) {
    const roomsInfo: any = {};
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–æ–º–Ω–∞—Ç–∞–º
    Object.values(ROOMS).forEach((roomName) => {
      const room = this.server.sockets.adapter.rooms.get(roomName);
      if (room) {
        roomsInfo[roomName] = {
          clientCount: room.size,
          clients: Array.from(room),
        };
      } else {
        roomsInfo[roomName] = {
          clientCount: 0,
          clients: [],
        };
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–∏—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç
    const clientRooms: string[] = [];
    Object.values(ROOMS).forEach((roomName) => {
      const room = this.server.sockets.adapter.rooms.get(roomName);
      if (room && room.has(client.id)) {
        clientRooms.push(roomName);
      }
    });

    this.logger.warn(`üìä DEBUG ROOMS INFO:`, roomsInfo);
    
    client.emit('debug_rooms_response', {
      allRooms: roomsInfo,
      yourRooms: clientRooms,
      yourSocketId: client.id,
    });
  }

  /**
   * === –¢–ï–°–¢–û–í–´–ï –ò –û–¢–õ–ê–î–û–ß–ù–´–ï –ú–ï–¢–û–î–´ ===
   * –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ WebSocket –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
   */

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
   * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
   * –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
   *
   * @param data - –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param client - –æ–±—ä–µ–∫—Ç Socket –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
   */
  @SubscribeMessage('test_message')
  async handleTestMessage(
    @MessageBody() data: { room?: string; message: string },
    @ConnectedSocket() client: Socket,
  ) {
    /**
     * –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û–õ–£–ß–ê–¢–ï–õ–ï–ô –¢–ï–°–¢–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
     */
    if (data.room) {
      /**
       * –û–¢–ü–†–ê–í–ö–ê –í –ö–û–ù–ö–†–ï–¢–ù–£–Æ –ö–û–ú–ù–ê–¢–£
       * –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç—É–¥–∞
       */
      this.socketService.sendCustomEvent(data.room, 'test_response', {
        message: data.message, // –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        from: client.id, // ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        timestamp: new Date(), // –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      });
    } else {
      /**
       * –û–¢–ü–†–ê–í–ö–ê –í–°–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú
       * –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
       */
      this.socketService.emitToAll('test_response', {
        message: data.message,
        from: client.id,
        timestamp: new Date(),
      });
    }

    /**
     * –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–ª–µ–¥—É–µ—Ç —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å
     * –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–º—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
     */
  }
}
