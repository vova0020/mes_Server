/**
 * ===== WEBSOCKETS MODULE =====
 *
 * Этот модуль является центральным узлом для всей WebSocket функциональности в MES системе.
 * Он объединяет все компоненты WebSocket архитектуры и предоставляет их для использования
 * в других частях приложения.
 *
 * Основные компоненты:
 * - MainGateway: основной шлюз для обработки WebSocket соединений
 * - SocketService: сервис для отправки сообщений клиентам
 * - RoomService: сервис для управления комнатами (группами пользователей)
 * - JWT интеграция: для аутентификации пользователей через WebSocket
 */

// Импорт декоратора Module из NestJS для создания модуля
import { Module } from '@nestjs/common';

// Импорт основного Gateway класса, который обрабатывает WebSocket соединения
import { MainGateway } from './gateways/main.gateway';

// Импорт сервиса для отправки сообщений через WebSocket
import { SocketService } from './services/socket.service';

// Импорт сервиса для управления комнатами (группировка пользователей)
import { RoomService } from './services/room.service';

// Импорт JWT модуля и сервиса для аутентификации пользователей
import { JwtModule, JwtService } from '@nestjs/jwt';

/**
 * Декоратор @Module определяет метаданные для модуля NestJS
 * Модуль инкапсулирует связанные компоненты и делает их доступными для DI контейнера
 */
@Module({
  /**
   * imports: массив модулей, которые экспортируют провайдеры, необходимые в этом модуле
   * Здесь мы импортируем JwtModule для работы с JWT токенами в WebSocket соединениях
   */
  imports: [
    /**
     * Регистрация JwtModule с конфигурацией:
     * - secret: секретный ключ для подписи JWT токенов (берется из переменной окружения)
     * - signOptions: опции для создания токенов (время жизни 1 час)
     */
    JwtModule.register({
      secret: process.env.JWT_SECRET || 'replace_this_secret', // Секретный ключ (в продакшене должен быть в .env)
      signOptions: { expiresIn: '1h' }, // Токен действителен 1 час
    }),
  ],

  /**
   * providers: массив провайдеров, которые будут созданы DI контейнером
   * Эти классы будут доступны для инъекции зависимостей внутри модуля
   */
  providers: [
    MainGateway, // Основной WebSocket Gateway
    SocketService, // Сервис для отправки сообщений
    RoomService, // Сервис для управления комнатами
    JwtService, // Сервис для работы с JWT токенами
  ],

  /**
   * exports: массив провайдеров, которые будут доступны в других модулях,
   * импортирующих данный модуль
   * Экспортируем сервисы, чтобы другие модули могли отправлять WebSocket сообщения
   */
  exports: [
    SocketService, // Позволяет другим модулям отправлять WebSocket сообщения
    RoomService, // Позволяет другим модулям управлять комнатами
  ],
})
/**
 * Класс WebsocketsModule - пустой класс, служащий контейнером для метаданных модуля
 * Вся логика находится в провайдерах, определенных в декораторе @Module
 */
export class WebsocketModule {}
