import {
  WebSocketGateway,
  WebSocketServer,
  SubscribeMessage,
  MessageBody,
  ConnectedSocket,
  OnGatewayInit,
  OnGatewayConnection,
  OnGatewayDisconnect,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { Logger } from '@nestjs/common';
import { EventsService } from './services/events.service';
import { RoomManagerService } from './services/room-manager.service';
import { WebSocketRooms } from './types/rooms.types';

@WebSocketGateway({
  cors: {
    origin: '*', // –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    methods: ['GET', 'POST'],
    credentials: true,
  },
  pingInterval: 30000,
  pingTimeout: 25000,
})
export class EventsGateway
  implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect
{
  private readonly logger = new Logger(EventsGateway.name);

  constructor(
    private readonly eventsService: EventsService,
    private readonly roomManager: RoomManagerService,
  ) {}

  @WebSocketServer()
  server: Server;

  // ================================
  // Lifecycle –º–µ—Ç–æ–¥—ã
  // ================================

  afterInit(server: Server) {
    this.eventsService.setServer(server);
    this.logger.log('üöÄ WebSocket Gateway –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    setInterval(
      () => {
        this.eventsService.cleanup();
      },
      5 * 60 * 1000,
    ); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  }

  handleConnection(client: Socket) {
    this.logger.log(`üîó –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${client.id}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö
    client.emit('roomsAvailable', {
      rooms: Object.values(WebSocketRooms),
      timestamp: new Date().toISOString(),
    });
  }

  async handleDisconnect(client: Socket) {
    this.logger.log(`üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${client.id}`);

    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
    await this.roomManager.leaveAllRooms(client);
  }

  // ================================
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–º–Ω–∞—Ç—ã
  // ================================

  @SubscribeMessage('joinRoom')
  async handleJoinRoom(
    @ConnectedSocket() client: Socket,
    @MessageBody() data: { room: WebSocketRooms },
  ) {
    try {
      if (!Object.values(WebSocketRooms).includes(data.room)) {
        client.emit('error', {
          message: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞: ${data.room}`,
          availableRooms: Object.values(WebSocketRooms),
        });
        return;
      }

      await this.roomManager.joinRoom(client, data.room);

      client.emit('roomJoined', {
        room: data.room,
        timestamp: new Date().toISOString(),
      });

      this.logger.log(
        `‚úÖ –ö–ª–∏–µ–Ω—Ç ${client.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ "${data.room}"`,
      );
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ:`, error);
      client.emit('error', {
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ',
        error: error.message,
      });
    }
  }

  @SubscribeMessage('leaveRoom')
  async handleLeaveRoom(
    @ConnectedSocket() client: Socket,
    @MessageBody() data: { room: WebSocketRooms },
  ) {
    try {
      await this.roomManager.leaveRoom(client, data.room);

      client.emit('roomLeft', {
        room: data.room,
        timestamp: new Date().toISOString(),
      });

      this.logger.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${client.id} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É "${data.room}"`);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:`, error);
      client.emit('error', {
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã',
        error: error.message,
      });
    }
  }

  // ================================
  // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  // ================================

  @SubscribeMessage('getRoomStats')
  handleGetRoomStats(@ConnectedSocket() client: Socket) {
    const stats = this.eventsService.getStats();
    client.emit('roomStats', stats);
  }

  @SubscribeMessage('getMyRooms')
  handleGetMyRooms(@ConnectedSocket() client: Socket) {
    const myRooms = this.roomManager.getClientRooms(client.id);
    client.emit('myRooms', {
      rooms: myRooms,
      timestamp: new Date().toISOString(),
    });
  }

  @SubscribeMessage('ping')
  handlePing(@ConnectedSocket() client: Socket) {
    client.emit('pong', {
      timestamp: new Date().toISOString(),
    });
  }
}
