import { Injectable, Logger } from '@nestjs/common';
import { Server } from 'socket.io';
import {
  WebSocketRooms,
  RoomEvents,
  BaseEventPayload,
} from '../types/rooms.types';
import { RoomManagerService } from './room-manager.service';

@Injectable()
export class EventsService {
  private readonly logger = new Logger(EventsService.name);
  private server: Server;

  constructor(private readonly roomManager: RoomManagerService) {}

  setServer(server: Server) {
    this.server = server;
    this.roomManager.setServer(server);
    this.logger.log('üîå EventsService: Socket.IO —Å–µ—Ä–≤–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É (—Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)
   */
  emitToRoom<T extends WebSocketRooms>(
    room: T,
    event: T extends keyof RoomEvents ? keyof RoomEvents[T] : string,
    payload: any,
  ): void {
    if (!this.server) {
      this.logger.warn(
        '‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞',
      );
      return;
    }

    const clientCount = this.roomManager.getRoomClientCount(room);

    if (clientCount === 0) {
      this.logger.debug(
        `üì≠ –°–æ–±—ã—Ç–∏–µ "${String(event)}" –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ "${room}"`,
      );
      return;
    }

    try {
      this.server.to(room).emit(String(event), payload);
      this.logger.debug(
        `üì§ –°–æ–±—ã—Ç–∏–µ "${String(event)}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç—É "${room}" (${clientCount} –∫–ª–∏–µ–Ω—Ç–æ–≤)`,
      );
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è "${String(event)}" –≤ –∫–æ–º–Ω–∞—Ç—É "${room}":`,
        error,
      );
    }
  }

  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π –∏ –∫–æ–º–Ω–∞—Ç
   */
  getStats(): Record<string, any> {
    return {
      serverConnected: !!this.server,
      roomStats: this.roomManager.getAllRoomsStats(),
      timestamp: new Date().toISOString(),
    };
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
   */
  cleanup(): void {
    this.roomManager.cleanupInactiveSubscriptions();
  }
}
