import { Injectable, Logger } from '@nestjs/common';
import { Server, Socket } from 'socket.io';
import { WebSocketRooms, RoomSubscription } from '../types/rooms.types';

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–Ω–∞—Ç WebSocket
 */
@Injectable()
export class RoomManagerService {
  private readonly logger = new Logger(RoomManagerService.name);
  private server: Server;
  private roomSubscriptions = new Map<string, RoomSubscription[]>();

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä Socket.IO
   */
  setServer(server: Server) {
    this.server = server;
    this.logger.log('üîå RoomManager: Socket.IO —Å–µ—Ä–≤–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ
   */
  async joinRoom(client: Socket, room: WebSocketRooms): Promise<void> {
    try {
      await client.join(room);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
      const subscription: RoomSubscription = {
        room,
        clientId: client.id,
        joinedAt: new Date(),
      };

      if (!this.roomSubscriptions.has(room)) {
        this.roomSubscriptions.set(room, []);
      }

      const roomSubs = this.roomSubscriptions.get(room)!;
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
      const existingIndex = roomSubs.findIndex(
        (sub) => sub.clientId === client.id,
      );
      if (existingIndex !== -1) {
        roomSubs.splice(existingIndex, 1);
      }

      roomSubs.push(subscription);

      this.logger.log(
        `üë§ –ö–ª–∏–µ–Ω—Ç ${client.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ "${room}"`,
      );
      this.logRoomStats(room);
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ "${room}":`,
        error,
      );
      throw error;
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã
   */
  async leaveRoom(client: Socket, room: WebSocketRooms): Promise<void> {
    try {
      await client.leave(room);

      // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
      const roomSubs = this.roomSubscriptions.get(room);
      if (roomSubs) {
        const index = roomSubs.findIndex((sub) => sub.clientId === client.id);
        if (index !== -1) {
          roomSubs.splice(index, 1);
        }
      }

      this.logger.log(`üë§ –ö–ª–∏–µ–Ω—Ç ${client.id} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É "${room}"`);
      this.logRoomStats(room);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã "${room}":`, error);
      throw error;
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
   */
  async leaveAllRooms(client: Socket): Promise<void> {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
      const clientRooms: WebSocketRooms[] = [];

      for (const [room, subscriptions] of this.roomSubscriptions.entries()) {
        if (subscriptions.some((sub) => sub.clientId === client.id)) {
          clientRooms.push(room as WebSocketRooms);
        }
      }

      // –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
      for (const room of clientRooms) {
        await this.leaveRoom(client, room);
      }

      this.logger.log(
        `üë§ –ö–ª–∏–µ–Ω—Ç ${client.id} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç (${clientRooms.length})`,
      );
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç:`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
   */
  getRoomClients(room: WebSocketRooms): RoomSubscription[] {
    return this.roomSubscriptions.get(room) || [];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
   */
  getRoomClientCount(room: WebSocketRooms): number {
    return this.getRoomClients(room).length;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
   */
  getActiveRooms(): { room: WebSocketRooms; clientCount: number }[] {
    const activeRooms: { room: WebSocketRooms; clientCount: number }[] = [];

    for (const [room, subscriptions] of this.roomSubscriptions.entries()) {
      if (subscriptions.length > 0) {
        activeRooms.push({
          room: room as WebSocketRooms,
          clientCount: subscriptions.length,
        });
      }
    }

    return activeRooms;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç –∫ –∫–æ–º–Ω–∞—Ç–µ
   */
  isClientInRoom(clientId: string, room: WebSocketRooms): boolean {
    const roomSubs = this.roomSubscriptions.get(room);
    return roomSubs ? roomSubs.some((sub) => sub.clientId === clientId) : false;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
   */
  getClientRooms(clientId: string): WebSocketRooms[] {
    const clientRooms: WebSocketRooms[] = [];

    for (const [room, subscriptions] of this.roomSubscriptions.entries()) {
      if (subscriptions.some((sub) => sub.clientId === clientId)) {
        clientRooms.push(room as WebSocketRooms);
      }
    }

    return clientRooms;
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
   */
  private logRoomStats(room: WebSocketRooms): void {
    const clientCount = this.getRoomClientCount(room);
    this.logger.debug(`üìä –ö–æ–º–Ω–∞—Ç–∞ "${room}": ${clientCount} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
   */
  getAllRoomsStats(): Record<string, any> {
    const stats: Record<string, any> = {};

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç–µ
    Object.values(WebSocketRooms).forEach((room) => {
      const clients = this.getRoomClients(room);
      stats[room] = {
        clientCount: clients.length,
        clients: clients.map((sub) => ({
          clientId: sub.clientId,
          joinedAt: sub.joinedAt,
          duration: Date.now() - sub.joinedAt.getTime(),
        })),
      };
    });

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalClients = Object.values(stats).reduce(
      (sum, room) => sum + room.clientCount,
      0,
    );
    const activeRooms = Object.values(stats).filter(
      (room) => room.clientCount > 0,
    ).length;

    stats._summary = {
      totalClients,
      activeRooms,
      totalRooms: Object.values(WebSocketRooms).length,
    };

    return stats;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏)
   */
  cleanupInactiveSubscriptions(): void {
    let cleanedCount = 0;

    for (const [room, subscriptions] of this.roomSubscriptions.entries()) {
      const activeSubs = subscriptions.filter((sub) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ Socket.IO
        const socket = this.server?.sockets.sockets.get(sub.clientId);
        return socket && socket.connected;
      });

      const removedCount = subscriptions.length - activeSubs.length;
      cleanedCount += removedCount;

      if (removedCount > 0) {
        this.roomSubscriptions.set(room, activeSubs);
        this.logger.debug(
          `üßπ –û—á–∏—â–µ–Ω–æ ${removedCount} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã "${room}"`,
        );
      }
    }

    if (cleanedCount > 0) {
      this.logger.log(`üßπ –í—Å–µ–≥–æ –æ—á–∏—â–µ–Ω–æ ${cleanedCount} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫`);
    }
  }
}
