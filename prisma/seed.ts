import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function seed() {
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π...');

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤
  for (let orderNum = 1; orderNum <= 3; orderNum++) {
    const order = await prisma.order.create({
      data: {
        batchNumber: `BATCH00${orderNum}`,
        orderName: `–ó–∞–∫–∞–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ ‚Ññ${orderNum}`,
        completionPercentage: 0,
        launchPermission: true,
        isCompleted: false,
      },
    });

    console.log(`–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑: ${order.orderName}`);

    // –°–æ–∑–¥–∞–Ω–∏–µ 3 —É–ø–∞–∫–æ–≤–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    for (let pkgNum = 1; pkgNum <= 3; pkgNum++) {
      const packageItem = await prisma.package.create({
        data: {
          orderId: order.orderId,
          packageCode: `PKG${orderNum}${pkgNum.toString().padStart(2, '0')}`,
          packageName: `–£–ø–∞–∫–æ–≤–∫–∞ ${pkgNum} –∑–∞–∫–∞–∑–∞ ${orderNum}`,
          completionPercentage: 0,
          quantity: 10,
        },
      });

      console.log(`  –°–æ–∑–¥–∞–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∞: ${packageItem.packageName}`);

      // –°–æ–∑–¥–∞–Ω–∏–µ 3 –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π —É–ø–∞–∫–æ–≤–∫–∏
      for (let partNum = 1; partNum <= 3; partNum++) {
        const partCode = `PART${orderNum}${pkgNum}${partNum}`;
        const totalQuantity = 20; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π

        const part = await prisma.part.create({
          data: {
            partCode: partCode,
            partName: `–î–µ—Ç–∞–ª—å ${partNum} —É–ø–∞–∫–æ–≤–∫–∏ ${pkgNum} –∑–∞–∫–∞–∑–∞ ${orderNum}`,
            size: `${400 + partNum * 50}x${200 + partNum * 30}x${15 + partNum * 2}`,
            totalQuantity: totalQuantity,
            status: 'PENDING',
            isSubassembly: false,
            route: { connect: { routeId: 1 } },
            material: { connect: { materialId: 1 } },
            readyForMainFlow: false,
          },
        });

        console.log(`    –°–æ–∑–¥–∞–Ω–∞ –¥–µ—Ç–∞–ª—å: ${part.partName} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${totalQuantity})`);

        // –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ —Å —É–ø–∞–∫–æ–≤–∫–æ–π
        await prisma.productionPackagePart.create({
          data: {
            packageId: packageItem.packageId,
            partId: part.partId,
            quantity: totalQuantity,
          },
        });

        // –°–æ–∑–¥–∞–Ω–∏–µ 4 –ø–æ–¥–¥–æ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        const quantityPerPallet = totalQuantity / 4; // 5 —à—Ç—É–∫ –Ω–∞ –ø–æ–¥–¥–æ–Ω

        for (let palletNum = 1; palletNum <= 4; palletNum++) {
          await prisma.pallet.create({
            data: {
              partId: part.partId,
              palletName: `–ü–æ–¥–¥–æ–Ω ${palletNum} –¥–ª—è ${part.partName}`,
              quantity: quantityPerPallet,
            },
          });

          console.log(`      –°–æ–∑–¥–∞–Ω –ø–æ–¥–¥–æ–Ω ${palletNum} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantityPerPallet})`);
        }
      }
    }

    console.log(`–ó–∞–∫–∞–∑ ${orderNum} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–Ω\n`);
  }

  console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É!');
  console.log('üìä –°–æ–∑–¥–∞–Ω–æ:');
  console.log('   - 3 –∑–∞–∫–∞–∑–∞');
  console.log('   - 9 —É–ø–∞–∫–æ–≤–æ–∫ (3 –Ω–∞ –∑–∞–∫–∞–∑)');
  console.log('   - 27 –¥–µ—Ç–∞–ª–µ–π (3 –Ω–∞ —É–ø–∞–∫–æ–≤–∫—É)');
  console.log('   - 108 –ø–æ–¥–¥–æ–Ω–æ–≤ (4 –Ω–∞ –¥–µ—Ç–∞–ª—å)');
}

seed()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });





  
// import { PrismaClient } from '@prisma/client';
// import * as bcrypt from 'bcrypt';

// const prisma = new PrismaClient();

// async function main() {
//   console.log('–°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

//   // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
//   const adminRole = await prisma.role.create({
//     data: {
//       roleName: 'admin',
//     },
//   });
//   const masterRole = await prisma.role.create({
//     data: {
//       roleName: 'master',
//     },
//   });
//   const managementRole = await prisma.role.create({
//     data: {
//       roleName: 'management',
//     },
//   });
//   const technologistRole = await prisma.role.create({
//     data: {
//       roleName: 'technologist',
//     },
//   });
//   const orderPickerRole = await prisma.role.create({
//     data: {
//       roleName: 'orderPicker',
//     },
//   });
//   const workplaceRole = await prisma.role.create({
//     data: {
//       roleName: 'workplace',
//     },
//   });
//   const operatorRole = await prisma.role.create({
//     data: {
//       roleName: 'operator',
//     },
//   });

//   // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
//   const hashedPassword = await bcrypt.hash('12345', 10);

//   // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
//   const adminUser = await prisma.user.create({
//     data: {
//       login: 'admin',
//       password: hashedPassword,
//       userDetail: {
//         create: {
//           firstName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
//           lastName: '–°–∏—Å—Ç–µ–º—ã',
//           phone: '+7 (900) 123-45-67',
//           position: '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
//           salary: 100000,
//         },
//       },
//     },
//   });

//   // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
//   await prisma.userRole.create({
//     data: {
//       userId: adminUser.userId,
//       roleId: adminRole.roleId,
//     },
//   });

//   console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
//   console.log('');
//   console.log('üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
//   console.log('   –õ–æ–≥–∏–Ω: admin');
//   console.log('   –ü–∞—Ä–æ–ª—å: 12345');
// }

// main()
//   .catch((e) => {
//     console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', e);
//     process.exit(1);
//   })
//   .finally(async () => {
//     await prisma.$disconnect();
//   });
